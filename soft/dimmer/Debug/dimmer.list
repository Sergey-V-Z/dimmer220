
dimmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003864  08003864  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003864  08003864  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003864  08003864  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800386c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000018  08003884  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08003884  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d782  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002408  00000000  00000000  0002d805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  0002fc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad5  00000000  00000000  00030a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010f61  00000000  00000000  000314d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001088c  00000000  00000000  00042436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00065ecd  00000000  00000000  00052cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003348  00000000  00000000  000b8b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000bbed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003790 	.word	0x08003790

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08003790 	.word	0x08003790

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fe52 	bl	8000ed0 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fdb5 	bl	8000da0 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 fc0f 	bl	8000a60 <__aeabi_fsub>
 8000242:	f000 fdad 	bl	8000da0 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fadd>:
 8000250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000252:	4647      	mov	r7, r8
 8000254:	46ce      	mov	lr, r9
 8000256:	024a      	lsls	r2, r1, #9
 8000258:	0243      	lsls	r3, r0, #9
 800025a:	0045      	lsls	r5, r0, #1
 800025c:	0fc4      	lsrs	r4, r0, #31
 800025e:	0a50      	lsrs	r0, r2, #9
 8000260:	4680      	mov	r8, r0
 8000262:	0048      	lsls	r0, r1, #1
 8000264:	0a5b      	lsrs	r3, r3, #9
 8000266:	0e00      	lsrs	r0, r0, #24
 8000268:	0992      	lsrs	r2, r2, #6
 800026a:	4694      	mov	ip, r2
 800026c:	b580      	push	{r7, lr}
 800026e:	001e      	movs	r6, r3
 8000270:	4681      	mov	r9, r0
 8000272:	0002      	movs	r2, r0
 8000274:	0e2d      	lsrs	r5, r5, #24
 8000276:	00df      	lsls	r7, r3, #3
 8000278:	0fc9      	lsrs	r1, r1, #31
 800027a:	428c      	cmp	r4, r1
 800027c:	d024      	beq.n	80002c8 <__aeabi_fadd+0x78>
 800027e:	1a28      	subs	r0, r5, r0
 8000280:	2800      	cmp	r0, #0
 8000282:	dd0e      	ble.n	80002a2 <__aeabi_fadd+0x52>
 8000284:	2a00      	cmp	r2, #0
 8000286:	d13e      	bne.n	8000306 <__aeabi_fadd+0xb6>
 8000288:	4662      	mov	r2, ip
 800028a:	2a00      	cmp	r2, #0
 800028c:	d100      	bne.n	8000290 <__aeabi_fadd+0x40>
 800028e:	e0fd      	b.n	800048c <__aeabi_fadd+0x23c>
 8000290:	1e42      	subs	r2, r0, #1
 8000292:	2801      	cmp	r0, #1
 8000294:	d100      	bne.n	8000298 <__aeabi_fadd+0x48>
 8000296:	e137      	b.n	8000508 <__aeabi_fadd+0x2b8>
 8000298:	28ff      	cmp	r0, #255	; 0xff
 800029a:	d100      	bne.n	800029e <__aeabi_fadd+0x4e>
 800029c:	e0a9      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 800029e:	0010      	movs	r0, r2
 80002a0:	e039      	b.n	8000316 <__aeabi_fadd+0xc6>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	d063      	beq.n	800036e <__aeabi_fadd+0x11e>
 80002a6:	464b      	mov	r3, r9
 80002a8:	1b52      	subs	r2, r2, r5
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	d000      	beq.n	80002b0 <__aeabi_fadd+0x60>
 80002ae:	e0e0      	b.n	8000472 <__aeabi_fadd+0x222>
 80002b0:	2f00      	cmp	r7, #0
 80002b2:	d100      	bne.n	80002b6 <__aeabi_fadd+0x66>
 80002b4:	e0ce      	b.n	8000454 <__aeabi_fadd+0x204>
 80002b6:	1e53      	subs	r3, r2, #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	d100      	bne.n	80002be <__aeabi_fadd+0x6e>
 80002bc:	e155      	b.n	800056a <__aeabi_fadd+0x31a>
 80002be:	2aff      	cmp	r2, #255	; 0xff
 80002c0:	d100      	bne.n	80002c4 <__aeabi_fadd+0x74>
 80002c2:	e094      	b.n	80003ee <__aeabi_fadd+0x19e>
 80002c4:	001a      	movs	r2, r3
 80002c6:	e0d9      	b.n	800047c <__aeabi_fadd+0x22c>
 80002c8:	1a2a      	subs	r2, r5, r0
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	dc00      	bgt.n	80002d0 <__aeabi_fadd+0x80>
 80002ce:	e099      	b.n	8000404 <__aeabi_fadd+0x1b4>
 80002d0:	2800      	cmp	r0, #0
 80002d2:	d062      	beq.n	800039a <__aeabi_fadd+0x14a>
 80002d4:	2dff      	cmp	r5, #255	; 0xff
 80002d6:	d100      	bne.n	80002da <__aeabi_fadd+0x8a>
 80002d8:	e08b      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 80002da:	2380      	movs	r3, #128	; 0x80
 80002dc:	4661      	mov	r1, ip
 80002de:	04db      	lsls	r3, r3, #19
 80002e0:	4319      	orrs	r1, r3
 80002e2:	468c      	mov	ip, r1
 80002e4:	2a1b      	cmp	r2, #27
 80002e6:	dc00      	bgt.n	80002ea <__aeabi_fadd+0x9a>
 80002e8:	e0d2      	b.n	8000490 <__aeabi_fadd+0x240>
 80002ea:	2301      	movs	r3, #1
 80002ec:	19db      	adds	r3, r3, r7
 80002ee:	015a      	lsls	r2, r3, #5
 80002f0:	d56a      	bpl.n	80003c8 <__aeabi_fadd+0x178>
 80002f2:	3501      	adds	r5, #1
 80002f4:	2dff      	cmp	r5, #255	; 0xff
 80002f6:	d05b      	beq.n	80003b0 <__aeabi_fadd+0x160>
 80002f8:	2201      	movs	r2, #1
 80002fa:	49a3      	ldr	r1, [pc, #652]	; (8000588 <__aeabi_fadd+0x338>)
 80002fc:	401a      	ands	r2, r3
 80002fe:	085b      	lsrs	r3, r3, #1
 8000300:	400b      	ands	r3, r1
 8000302:	4313      	orrs	r3, r2
 8000304:	e01c      	b.n	8000340 <__aeabi_fadd+0xf0>
 8000306:	2dff      	cmp	r5, #255	; 0xff
 8000308:	d100      	bne.n	800030c <__aeabi_fadd+0xbc>
 800030a:	e072      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	4662      	mov	r2, ip
 8000310:	04db      	lsls	r3, r3, #19
 8000312:	431a      	orrs	r2, r3
 8000314:	4694      	mov	ip, r2
 8000316:	281b      	cmp	r0, #27
 8000318:	dc00      	bgt.n	800031c <__aeabi_fadd+0xcc>
 800031a:	e090      	b.n	800043e <__aeabi_fadd+0x1ee>
 800031c:	2301      	movs	r3, #1
 800031e:	1afb      	subs	r3, r7, r3
 8000320:	015a      	lsls	r2, r3, #5
 8000322:	d551      	bpl.n	80003c8 <__aeabi_fadd+0x178>
 8000324:	019b      	lsls	r3, r3, #6
 8000326:	099e      	lsrs	r6, r3, #6
 8000328:	0030      	movs	r0, r6
 800032a:	f000 fddb 	bl	8000ee4 <__clzsi2>
 800032e:	0033      	movs	r3, r6
 8000330:	3805      	subs	r0, #5
 8000332:	4083      	lsls	r3, r0
 8000334:	4285      	cmp	r5, r0
 8000336:	dc00      	bgt.n	800033a <__aeabi_fadd+0xea>
 8000338:	e075      	b.n	8000426 <__aeabi_fadd+0x1d6>
 800033a:	4a94      	ldr	r2, [pc, #592]	; (800058c <__aeabi_fadd+0x33c>)
 800033c:	1a2d      	subs	r5, r5, r0
 800033e:	4013      	ands	r3, r2
 8000340:	075a      	lsls	r2, r3, #29
 8000342:	d004      	beq.n	800034e <__aeabi_fadd+0xfe>
 8000344:	220f      	movs	r2, #15
 8000346:	401a      	ands	r2, r3
 8000348:	2a04      	cmp	r2, #4
 800034a:	d000      	beq.n	800034e <__aeabi_fadd+0xfe>
 800034c:	3304      	adds	r3, #4
 800034e:	015a      	lsls	r2, r3, #5
 8000350:	d53c      	bpl.n	80003cc <__aeabi_fadd+0x17c>
 8000352:	1c68      	adds	r0, r5, #1
 8000354:	2dfe      	cmp	r5, #254	; 0xfe
 8000356:	d02b      	beq.n	80003b0 <__aeabi_fadd+0x160>
 8000358:	019b      	lsls	r3, r3, #6
 800035a:	0a5e      	lsrs	r6, r3, #9
 800035c:	b2c0      	uxtb	r0, r0
 800035e:	05c0      	lsls	r0, r0, #23
 8000360:	4330      	orrs	r0, r6
 8000362:	07e4      	lsls	r4, r4, #31
 8000364:	4320      	orrs	r0, r4
 8000366:	bcc0      	pop	{r6, r7}
 8000368:	46b9      	mov	r9, r7
 800036a:	46b0      	mov	r8, r6
 800036c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800036e:	20fe      	movs	r0, #254	; 0xfe
 8000370:	1c6a      	adds	r2, r5, #1
 8000372:	4210      	tst	r0, r2
 8000374:	d172      	bne.n	800045c <__aeabi_fadd+0x20c>
 8000376:	2d00      	cmp	r5, #0
 8000378:	d000      	beq.n	800037c <__aeabi_fadd+0x12c>
 800037a:	e0ae      	b.n	80004da <__aeabi_fadd+0x28a>
 800037c:	2f00      	cmp	r7, #0
 800037e:	d100      	bne.n	8000382 <__aeabi_fadd+0x132>
 8000380:	e0ec      	b.n	800055c <__aeabi_fadd+0x30c>
 8000382:	4663      	mov	r3, ip
 8000384:	2000      	movs	r0, #0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d0e9      	beq.n	800035e <__aeabi_fadd+0x10e>
 800038a:	1afb      	subs	r3, r7, r3
 800038c:	015a      	lsls	r2, r3, #5
 800038e:	d400      	bmi.n	8000392 <__aeabi_fadd+0x142>
 8000390:	e0f3      	b.n	800057a <__aeabi_fadd+0x32a>
 8000392:	4663      	mov	r3, ip
 8000394:	000c      	movs	r4, r1
 8000396:	1bdb      	subs	r3, r3, r7
 8000398:	e7d2      	b.n	8000340 <__aeabi_fadd+0xf0>
 800039a:	4661      	mov	r1, ip
 800039c:	2900      	cmp	r1, #0
 800039e:	d05b      	beq.n	8000458 <__aeabi_fadd+0x208>
 80003a0:	1e51      	subs	r1, r2, #1
 80003a2:	2a01      	cmp	r2, #1
 80003a4:	d100      	bne.n	80003a8 <__aeabi_fadd+0x158>
 80003a6:	e0a7      	b.n	80004f8 <__aeabi_fadd+0x2a8>
 80003a8:	2aff      	cmp	r2, #255	; 0xff
 80003aa:	d022      	beq.n	80003f2 <__aeabi_fadd+0x1a2>
 80003ac:	000a      	movs	r2, r1
 80003ae:	e799      	b.n	80002e4 <__aeabi_fadd+0x94>
 80003b0:	20ff      	movs	r0, #255	; 0xff
 80003b2:	2600      	movs	r6, #0
 80003b4:	e7d3      	b.n	800035e <__aeabi_fadd+0x10e>
 80003b6:	21fe      	movs	r1, #254	; 0xfe
 80003b8:	1c6a      	adds	r2, r5, #1
 80003ba:	4211      	tst	r1, r2
 80003bc:	d073      	beq.n	80004a6 <__aeabi_fadd+0x256>
 80003be:	2aff      	cmp	r2, #255	; 0xff
 80003c0:	d0f6      	beq.n	80003b0 <__aeabi_fadd+0x160>
 80003c2:	0015      	movs	r5, r2
 80003c4:	4467      	add	r7, ip
 80003c6:	087b      	lsrs	r3, r7, #1
 80003c8:	075a      	lsls	r2, r3, #29
 80003ca:	d1bb      	bne.n	8000344 <__aeabi_fadd+0xf4>
 80003cc:	08db      	lsrs	r3, r3, #3
 80003ce:	2dff      	cmp	r5, #255	; 0xff
 80003d0:	d00f      	beq.n	80003f2 <__aeabi_fadd+0x1a2>
 80003d2:	025b      	lsls	r3, r3, #9
 80003d4:	0a5e      	lsrs	r6, r3, #9
 80003d6:	b2e8      	uxtb	r0, r5
 80003d8:	e7c1      	b.n	800035e <__aeabi_fadd+0x10e>
 80003da:	4662      	mov	r2, ip
 80003dc:	2a00      	cmp	r2, #0
 80003de:	d008      	beq.n	80003f2 <__aeabi_fadd+0x1a2>
 80003e0:	2280      	movs	r2, #128	; 0x80
 80003e2:	03d2      	lsls	r2, r2, #15
 80003e4:	4213      	tst	r3, r2
 80003e6:	d004      	beq.n	80003f2 <__aeabi_fadd+0x1a2>
 80003e8:	4640      	mov	r0, r8
 80003ea:	4210      	tst	r0, r2
 80003ec:	d101      	bne.n	80003f2 <__aeabi_fadd+0x1a2>
 80003ee:	000c      	movs	r4, r1
 80003f0:	4643      	mov	r3, r8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0dc      	beq.n	80003b0 <__aeabi_fadd+0x160>
 80003f6:	2680      	movs	r6, #128	; 0x80
 80003f8:	03f6      	lsls	r6, r6, #15
 80003fa:	431e      	orrs	r6, r3
 80003fc:	0276      	lsls	r6, r6, #9
 80003fe:	20ff      	movs	r0, #255	; 0xff
 8000400:	0a76      	lsrs	r6, r6, #9
 8000402:	e7ac      	b.n	800035e <__aeabi_fadd+0x10e>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d0d6      	beq.n	80003b6 <__aeabi_fadd+0x166>
 8000408:	1b42      	subs	r2, r0, r5
 800040a:	2d00      	cmp	r5, #0
 800040c:	d05c      	beq.n	80004c8 <__aeabi_fadd+0x278>
 800040e:	28ff      	cmp	r0, #255	; 0xff
 8000410:	d0ee      	beq.n	80003f0 <__aeabi_fadd+0x1a0>
 8000412:	2380      	movs	r3, #128	; 0x80
 8000414:	04db      	lsls	r3, r3, #19
 8000416:	431f      	orrs	r7, r3
 8000418:	2a1b      	cmp	r2, #27
 800041a:	dc00      	bgt.n	800041e <__aeabi_fadd+0x1ce>
 800041c:	e082      	b.n	8000524 <__aeabi_fadd+0x2d4>
 800041e:	2301      	movs	r3, #1
 8000420:	464d      	mov	r5, r9
 8000422:	4463      	add	r3, ip
 8000424:	e763      	b.n	80002ee <__aeabi_fadd+0x9e>
 8000426:	2220      	movs	r2, #32
 8000428:	1b40      	subs	r0, r0, r5
 800042a:	3001      	adds	r0, #1
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	0019      	movs	r1, r3
 8000430:	4093      	lsls	r3, r2
 8000432:	40c1      	lsrs	r1, r0
 8000434:	1e5a      	subs	r2, r3, #1
 8000436:	4193      	sbcs	r3, r2
 8000438:	2500      	movs	r5, #0
 800043a:	430b      	orrs	r3, r1
 800043c:	e780      	b.n	8000340 <__aeabi_fadd+0xf0>
 800043e:	2320      	movs	r3, #32
 8000440:	4661      	mov	r1, ip
 8000442:	1a1b      	subs	r3, r3, r0
 8000444:	4099      	lsls	r1, r3
 8000446:	4662      	mov	r2, ip
 8000448:	000b      	movs	r3, r1
 800044a:	40c2      	lsrs	r2, r0
 800044c:	1e59      	subs	r1, r3, #1
 800044e:	418b      	sbcs	r3, r1
 8000450:	4313      	orrs	r3, r2
 8000452:	e764      	b.n	800031e <__aeabi_fadd+0xce>
 8000454:	000c      	movs	r4, r1
 8000456:	4643      	mov	r3, r8
 8000458:	0015      	movs	r5, r2
 800045a:	e7b8      	b.n	80003ce <__aeabi_fadd+0x17e>
 800045c:	4663      	mov	r3, ip
 800045e:	1afe      	subs	r6, r7, r3
 8000460:	0173      	lsls	r3, r6, #5
 8000462:	d445      	bmi.n	80004f0 <__aeabi_fadd+0x2a0>
 8000464:	2e00      	cmp	r6, #0
 8000466:	d000      	beq.n	800046a <__aeabi_fadd+0x21a>
 8000468:	e75e      	b.n	8000328 <__aeabi_fadd+0xd8>
 800046a:	2400      	movs	r4, #0
 800046c:	2000      	movs	r0, #0
 800046e:	2600      	movs	r6, #0
 8000470:	e775      	b.n	800035e <__aeabi_fadd+0x10e>
 8000472:	2bff      	cmp	r3, #255	; 0xff
 8000474:	d0bb      	beq.n	80003ee <__aeabi_fadd+0x19e>
 8000476:	2380      	movs	r3, #128	; 0x80
 8000478:	04db      	lsls	r3, r3, #19
 800047a:	431f      	orrs	r7, r3
 800047c:	2a1b      	cmp	r2, #27
 800047e:	dd47      	ble.n	8000510 <__aeabi_fadd+0x2c0>
 8000480:	2301      	movs	r3, #1
 8000482:	4662      	mov	r2, ip
 8000484:	000c      	movs	r4, r1
 8000486:	464d      	mov	r5, r9
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	e749      	b.n	8000320 <__aeabi_fadd+0xd0>
 800048c:	0005      	movs	r5, r0
 800048e:	e79e      	b.n	80003ce <__aeabi_fadd+0x17e>
 8000490:	4661      	mov	r1, ip
 8000492:	2320      	movs	r3, #32
 8000494:	40d1      	lsrs	r1, r2
 8000496:	1a9b      	subs	r3, r3, r2
 8000498:	4662      	mov	r2, ip
 800049a:	409a      	lsls	r2, r3
 800049c:	0013      	movs	r3, r2
 800049e:	1e5a      	subs	r2, r3, #1
 80004a0:	4193      	sbcs	r3, r2
 80004a2:	430b      	orrs	r3, r1
 80004a4:	e722      	b.n	80002ec <__aeabi_fadd+0x9c>
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d146      	bne.n	8000538 <__aeabi_fadd+0x2e8>
 80004aa:	2f00      	cmp	r7, #0
 80004ac:	d062      	beq.n	8000574 <__aeabi_fadd+0x324>
 80004ae:	4663      	mov	r3, ip
 80004b0:	2000      	movs	r0, #0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d100      	bne.n	80004b8 <__aeabi_fadd+0x268>
 80004b6:	e752      	b.n	800035e <__aeabi_fadd+0x10e>
 80004b8:	003b      	movs	r3, r7
 80004ba:	4463      	add	r3, ip
 80004bc:	015a      	lsls	r2, r3, #5
 80004be:	d583      	bpl.n	80003c8 <__aeabi_fadd+0x178>
 80004c0:	4a32      	ldr	r2, [pc, #200]	; (800058c <__aeabi_fadd+0x33c>)
 80004c2:	3501      	adds	r5, #1
 80004c4:	4013      	ands	r3, r2
 80004c6:	e77f      	b.n	80003c8 <__aeabi_fadd+0x178>
 80004c8:	2f00      	cmp	r7, #0
 80004ca:	d0c4      	beq.n	8000456 <__aeabi_fadd+0x206>
 80004cc:	1e53      	subs	r3, r2, #1
 80004ce:	2a01      	cmp	r2, #1
 80004d0:	d012      	beq.n	80004f8 <__aeabi_fadd+0x2a8>
 80004d2:	2aff      	cmp	r2, #255	; 0xff
 80004d4:	d08c      	beq.n	80003f0 <__aeabi_fadd+0x1a0>
 80004d6:	001a      	movs	r2, r3
 80004d8:	e79e      	b.n	8000418 <__aeabi_fadd+0x1c8>
 80004da:	2f00      	cmp	r7, #0
 80004dc:	d000      	beq.n	80004e0 <__aeabi_fadd+0x290>
 80004de:	e77c      	b.n	80003da <__aeabi_fadd+0x18a>
 80004e0:	4663      	mov	r3, ip
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d183      	bne.n	80003ee <__aeabi_fadd+0x19e>
 80004e6:	2680      	movs	r6, #128	; 0x80
 80004e8:	2400      	movs	r4, #0
 80004ea:	20ff      	movs	r0, #255	; 0xff
 80004ec:	03f6      	lsls	r6, r6, #15
 80004ee:	e736      	b.n	800035e <__aeabi_fadd+0x10e>
 80004f0:	4663      	mov	r3, ip
 80004f2:	000c      	movs	r4, r1
 80004f4:	1bde      	subs	r6, r3, r7
 80004f6:	e717      	b.n	8000328 <__aeabi_fadd+0xd8>
 80004f8:	003b      	movs	r3, r7
 80004fa:	4463      	add	r3, ip
 80004fc:	2501      	movs	r5, #1
 80004fe:	015a      	lsls	r2, r3, #5
 8000500:	d400      	bmi.n	8000504 <__aeabi_fadd+0x2b4>
 8000502:	e761      	b.n	80003c8 <__aeabi_fadd+0x178>
 8000504:	2502      	movs	r5, #2
 8000506:	e6f7      	b.n	80002f8 <__aeabi_fadd+0xa8>
 8000508:	4663      	mov	r3, ip
 800050a:	2501      	movs	r5, #1
 800050c:	1afb      	subs	r3, r7, r3
 800050e:	e707      	b.n	8000320 <__aeabi_fadd+0xd0>
 8000510:	2320      	movs	r3, #32
 8000512:	1a9b      	subs	r3, r3, r2
 8000514:	0038      	movs	r0, r7
 8000516:	409f      	lsls	r7, r3
 8000518:	003b      	movs	r3, r7
 800051a:	40d0      	lsrs	r0, r2
 800051c:	1e5a      	subs	r2, r3, #1
 800051e:	4193      	sbcs	r3, r2
 8000520:	4303      	orrs	r3, r0
 8000522:	e7ae      	b.n	8000482 <__aeabi_fadd+0x232>
 8000524:	2320      	movs	r3, #32
 8000526:	1a9b      	subs	r3, r3, r2
 8000528:	0039      	movs	r1, r7
 800052a:	409f      	lsls	r7, r3
 800052c:	003b      	movs	r3, r7
 800052e:	40d1      	lsrs	r1, r2
 8000530:	1e5a      	subs	r2, r3, #1
 8000532:	4193      	sbcs	r3, r2
 8000534:	430b      	orrs	r3, r1
 8000536:	e773      	b.n	8000420 <__aeabi_fadd+0x1d0>
 8000538:	2f00      	cmp	r7, #0
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0x2ee>
 800053c:	e758      	b.n	80003f0 <__aeabi_fadd+0x1a0>
 800053e:	4662      	mov	r2, ip
 8000540:	2a00      	cmp	r2, #0
 8000542:	d100      	bne.n	8000546 <__aeabi_fadd+0x2f6>
 8000544:	e755      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	03d2      	lsls	r2, r2, #15
 800054a:	4213      	tst	r3, r2
 800054c:	d100      	bne.n	8000550 <__aeabi_fadd+0x300>
 800054e:	e750      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 8000550:	4641      	mov	r1, r8
 8000552:	4211      	tst	r1, r2
 8000554:	d000      	beq.n	8000558 <__aeabi_fadd+0x308>
 8000556:	e74c      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 8000558:	4643      	mov	r3, r8
 800055a:	e74a      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 800055c:	4663      	mov	r3, ip
 800055e:	2b00      	cmp	r3, #0
 8000560:	d083      	beq.n	800046a <__aeabi_fadd+0x21a>
 8000562:	000c      	movs	r4, r1
 8000564:	4646      	mov	r6, r8
 8000566:	2000      	movs	r0, #0
 8000568:	e6f9      	b.n	800035e <__aeabi_fadd+0x10e>
 800056a:	4663      	mov	r3, ip
 800056c:	000c      	movs	r4, r1
 800056e:	1bdb      	subs	r3, r3, r7
 8000570:	3501      	adds	r5, #1
 8000572:	e6d5      	b.n	8000320 <__aeabi_fadd+0xd0>
 8000574:	4646      	mov	r6, r8
 8000576:	2000      	movs	r0, #0
 8000578:	e6f1      	b.n	800035e <__aeabi_fadd+0x10e>
 800057a:	2b00      	cmp	r3, #0
 800057c:	d000      	beq.n	8000580 <__aeabi_fadd+0x330>
 800057e:	e723      	b.n	80003c8 <__aeabi_fadd+0x178>
 8000580:	2400      	movs	r4, #0
 8000582:	2600      	movs	r6, #0
 8000584:	e6eb      	b.n	800035e <__aeabi_fadd+0x10e>
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	7dffffff 	.word	0x7dffffff
 800058c:	fbffffff 	.word	0xfbffffff

08000590 <__aeabi_fdiv>:
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	464f      	mov	r7, r9
 8000594:	4646      	mov	r6, r8
 8000596:	46d6      	mov	lr, sl
 8000598:	0245      	lsls	r5, r0, #9
 800059a:	b5c0      	push	{r6, r7, lr}
 800059c:	0047      	lsls	r7, r0, #1
 800059e:	1c0c      	adds	r4, r1, #0
 80005a0:	0a6d      	lsrs	r5, r5, #9
 80005a2:	0e3f      	lsrs	r7, r7, #24
 80005a4:	0fc6      	lsrs	r6, r0, #31
 80005a6:	2f00      	cmp	r7, #0
 80005a8:	d100      	bne.n	80005ac <__aeabi_fdiv+0x1c>
 80005aa:	e06f      	b.n	800068c <__aeabi_fdiv+0xfc>
 80005ac:	2fff      	cmp	r7, #255	; 0xff
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fdiv+0x22>
 80005b0:	e074      	b.n	800069c <__aeabi_fdiv+0x10c>
 80005b2:	2300      	movs	r3, #0
 80005b4:	2280      	movs	r2, #128	; 0x80
 80005b6:	4699      	mov	r9, r3
 80005b8:	469a      	mov	sl, r3
 80005ba:	00ed      	lsls	r5, r5, #3
 80005bc:	04d2      	lsls	r2, r2, #19
 80005be:	4315      	orrs	r5, r2
 80005c0:	3f7f      	subs	r7, #127	; 0x7f
 80005c2:	0263      	lsls	r3, r4, #9
 80005c4:	0a5b      	lsrs	r3, r3, #9
 80005c6:	4698      	mov	r8, r3
 80005c8:	0063      	lsls	r3, r4, #1
 80005ca:	0e1b      	lsrs	r3, r3, #24
 80005cc:	0fe4      	lsrs	r4, r4, #31
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d04d      	beq.n	800066e <__aeabi_fdiv+0xde>
 80005d2:	2bff      	cmp	r3, #255	; 0xff
 80005d4:	d045      	beq.n	8000662 <__aeabi_fdiv+0xd2>
 80005d6:	4642      	mov	r2, r8
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	00d2      	lsls	r2, r2, #3
 80005dc:	04c9      	lsls	r1, r1, #19
 80005de:	4311      	orrs	r1, r2
 80005e0:	4688      	mov	r8, r1
 80005e2:	2200      	movs	r2, #0
 80005e4:	3b7f      	subs	r3, #127	; 0x7f
 80005e6:	0031      	movs	r1, r6
 80005e8:	1aff      	subs	r7, r7, r3
 80005ea:	464b      	mov	r3, r9
 80005ec:	4061      	eors	r1, r4
 80005ee:	b2c9      	uxtb	r1, r1
 80005f0:	2b0f      	cmp	r3, #15
 80005f2:	d900      	bls.n	80005f6 <__aeabi_fdiv+0x66>
 80005f4:	e0b8      	b.n	8000768 <__aeabi_fdiv+0x1d8>
 80005f6:	4870      	ldr	r0, [pc, #448]	; (80007b8 <__aeabi_fdiv+0x228>)
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	58c3      	ldr	r3, [r0, r3]
 80005fc:	469f      	mov	pc, r3
 80005fe:	2300      	movs	r3, #0
 8000600:	4698      	mov	r8, r3
 8000602:	0026      	movs	r6, r4
 8000604:	4645      	mov	r5, r8
 8000606:	4692      	mov	sl, r2
 8000608:	4653      	mov	r3, sl
 800060a:	2b02      	cmp	r3, #2
 800060c:	d100      	bne.n	8000610 <__aeabi_fdiv+0x80>
 800060e:	e08d      	b.n	800072c <__aeabi_fdiv+0x19c>
 8000610:	2b03      	cmp	r3, #3
 8000612:	d100      	bne.n	8000616 <__aeabi_fdiv+0x86>
 8000614:	e0a1      	b.n	800075a <__aeabi_fdiv+0x1ca>
 8000616:	2b01      	cmp	r3, #1
 8000618:	d018      	beq.n	800064c <__aeabi_fdiv+0xbc>
 800061a:	003b      	movs	r3, r7
 800061c:	337f      	adds	r3, #127	; 0x7f
 800061e:	2b00      	cmp	r3, #0
 8000620:	dd6d      	ble.n	80006fe <__aeabi_fdiv+0x16e>
 8000622:	076a      	lsls	r2, r5, #29
 8000624:	d004      	beq.n	8000630 <__aeabi_fdiv+0xa0>
 8000626:	220f      	movs	r2, #15
 8000628:	402a      	ands	r2, r5
 800062a:	2a04      	cmp	r2, #4
 800062c:	d000      	beq.n	8000630 <__aeabi_fdiv+0xa0>
 800062e:	3504      	adds	r5, #4
 8000630:	012a      	lsls	r2, r5, #4
 8000632:	d503      	bpl.n	800063c <__aeabi_fdiv+0xac>
 8000634:	4b61      	ldr	r3, [pc, #388]	; (80007bc <__aeabi_fdiv+0x22c>)
 8000636:	401d      	ands	r5, r3
 8000638:	003b      	movs	r3, r7
 800063a:	3380      	adds	r3, #128	; 0x80
 800063c:	2bfe      	cmp	r3, #254	; 0xfe
 800063e:	dd00      	ble.n	8000642 <__aeabi_fdiv+0xb2>
 8000640:	e074      	b.n	800072c <__aeabi_fdiv+0x19c>
 8000642:	01aa      	lsls	r2, r5, #6
 8000644:	0a52      	lsrs	r2, r2, #9
 8000646:	b2d8      	uxtb	r0, r3
 8000648:	e002      	b.n	8000650 <__aeabi_fdiv+0xc0>
 800064a:	000e      	movs	r6, r1
 800064c:	2000      	movs	r0, #0
 800064e:	2200      	movs	r2, #0
 8000650:	05c0      	lsls	r0, r0, #23
 8000652:	07f6      	lsls	r6, r6, #31
 8000654:	4310      	orrs	r0, r2
 8000656:	4330      	orrs	r0, r6
 8000658:	bce0      	pop	{r5, r6, r7}
 800065a:	46ba      	mov	sl, r7
 800065c:	46b1      	mov	r9, r6
 800065e:	46a8      	mov	r8, r5
 8000660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000662:	4643      	mov	r3, r8
 8000664:	2b00      	cmp	r3, #0
 8000666:	d13f      	bne.n	80006e8 <__aeabi_fdiv+0x158>
 8000668:	2202      	movs	r2, #2
 800066a:	3fff      	subs	r7, #255	; 0xff
 800066c:	e003      	b.n	8000676 <__aeabi_fdiv+0xe6>
 800066e:	4643      	mov	r3, r8
 8000670:	2b00      	cmp	r3, #0
 8000672:	d12d      	bne.n	80006d0 <__aeabi_fdiv+0x140>
 8000674:	2201      	movs	r2, #1
 8000676:	0031      	movs	r1, r6
 8000678:	464b      	mov	r3, r9
 800067a:	4061      	eors	r1, r4
 800067c:	b2c9      	uxtb	r1, r1
 800067e:	4313      	orrs	r3, r2
 8000680:	2b0f      	cmp	r3, #15
 8000682:	d838      	bhi.n	80006f6 <__aeabi_fdiv+0x166>
 8000684:	484e      	ldr	r0, [pc, #312]	; (80007c0 <__aeabi_fdiv+0x230>)
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	58c3      	ldr	r3, [r0, r3]
 800068a:	469f      	mov	pc, r3
 800068c:	2d00      	cmp	r5, #0
 800068e:	d113      	bne.n	80006b8 <__aeabi_fdiv+0x128>
 8000690:	2304      	movs	r3, #4
 8000692:	4699      	mov	r9, r3
 8000694:	3b03      	subs	r3, #3
 8000696:	2700      	movs	r7, #0
 8000698:	469a      	mov	sl, r3
 800069a:	e792      	b.n	80005c2 <__aeabi_fdiv+0x32>
 800069c:	2d00      	cmp	r5, #0
 800069e:	d105      	bne.n	80006ac <__aeabi_fdiv+0x11c>
 80006a0:	2308      	movs	r3, #8
 80006a2:	4699      	mov	r9, r3
 80006a4:	3b06      	subs	r3, #6
 80006a6:	27ff      	movs	r7, #255	; 0xff
 80006a8:	469a      	mov	sl, r3
 80006aa:	e78a      	b.n	80005c2 <__aeabi_fdiv+0x32>
 80006ac:	230c      	movs	r3, #12
 80006ae:	4699      	mov	r9, r3
 80006b0:	3b09      	subs	r3, #9
 80006b2:	27ff      	movs	r7, #255	; 0xff
 80006b4:	469a      	mov	sl, r3
 80006b6:	e784      	b.n	80005c2 <__aeabi_fdiv+0x32>
 80006b8:	0028      	movs	r0, r5
 80006ba:	f000 fc13 	bl	8000ee4 <__clzsi2>
 80006be:	2776      	movs	r7, #118	; 0x76
 80006c0:	1f43      	subs	r3, r0, #5
 80006c2:	409d      	lsls	r5, r3
 80006c4:	2300      	movs	r3, #0
 80006c6:	427f      	negs	r7, r7
 80006c8:	4699      	mov	r9, r3
 80006ca:	469a      	mov	sl, r3
 80006cc:	1a3f      	subs	r7, r7, r0
 80006ce:	e778      	b.n	80005c2 <__aeabi_fdiv+0x32>
 80006d0:	4640      	mov	r0, r8
 80006d2:	f000 fc07 	bl	8000ee4 <__clzsi2>
 80006d6:	4642      	mov	r2, r8
 80006d8:	1f43      	subs	r3, r0, #5
 80006da:	409a      	lsls	r2, r3
 80006dc:	2376      	movs	r3, #118	; 0x76
 80006de:	425b      	negs	r3, r3
 80006e0:	4690      	mov	r8, r2
 80006e2:	1a1b      	subs	r3, r3, r0
 80006e4:	2200      	movs	r2, #0
 80006e6:	e77e      	b.n	80005e6 <__aeabi_fdiv+0x56>
 80006e8:	2303      	movs	r3, #3
 80006ea:	464a      	mov	r2, r9
 80006ec:	431a      	orrs	r2, r3
 80006ee:	4691      	mov	r9, r2
 80006f0:	33fc      	adds	r3, #252	; 0xfc
 80006f2:	2203      	movs	r2, #3
 80006f4:	e777      	b.n	80005e6 <__aeabi_fdiv+0x56>
 80006f6:	000e      	movs	r6, r1
 80006f8:	20ff      	movs	r0, #255	; 0xff
 80006fa:	2200      	movs	r2, #0
 80006fc:	e7a8      	b.n	8000650 <__aeabi_fdiv+0xc0>
 80006fe:	2201      	movs	r2, #1
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	2b1b      	cmp	r3, #27
 8000704:	dca2      	bgt.n	800064c <__aeabi_fdiv+0xbc>
 8000706:	379e      	adds	r7, #158	; 0x9e
 8000708:	002a      	movs	r2, r5
 800070a:	40bd      	lsls	r5, r7
 800070c:	40da      	lsrs	r2, r3
 800070e:	1e6b      	subs	r3, r5, #1
 8000710:	419d      	sbcs	r5, r3
 8000712:	4315      	orrs	r5, r2
 8000714:	076a      	lsls	r2, r5, #29
 8000716:	d004      	beq.n	8000722 <__aeabi_fdiv+0x192>
 8000718:	220f      	movs	r2, #15
 800071a:	402a      	ands	r2, r5
 800071c:	2a04      	cmp	r2, #4
 800071e:	d000      	beq.n	8000722 <__aeabi_fdiv+0x192>
 8000720:	3504      	adds	r5, #4
 8000722:	016a      	lsls	r2, r5, #5
 8000724:	d544      	bpl.n	80007b0 <__aeabi_fdiv+0x220>
 8000726:	2001      	movs	r0, #1
 8000728:	2200      	movs	r2, #0
 800072a:	e791      	b.n	8000650 <__aeabi_fdiv+0xc0>
 800072c:	20ff      	movs	r0, #255	; 0xff
 800072e:	2200      	movs	r2, #0
 8000730:	e78e      	b.n	8000650 <__aeabi_fdiv+0xc0>
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	2600      	movs	r6, #0
 8000736:	20ff      	movs	r0, #255	; 0xff
 8000738:	03d2      	lsls	r2, r2, #15
 800073a:	e789      	b.n	8000650 <__aeabi_fdiv+0xc0>
 800073c:	2300      	movs	r3, #0
 800073e:	4698      	mov	r8, r3
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	03d2      	lsls	r2, r2, #15
 8000744:	4215      	tst	r5, r2
 8000746:	d008      	beq.n	800075a <__aeabi_fdiv+0x1ca>
 8000748:	4643      	mov	r3, r8
 800074a:	4213      	tst	r3, r2
 800074c:	d105      	bne.n	800075a <__aeabi_fdiv+0x1ca>
 800074e:	431a      	orrs	r2, r3
 8000750:	0252      	lsls	r2, r2, #9
 8000752:	0026      	movs	r6, r4
 8000754:	20ff      	movs	r0, #255	; 0xff
 8000756:	0a52      	lsrs	r2, r2, #9
 8000758:	e77a      	b.n	8000650 <__aeabi_fdiv+0xc0>
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	03d2      	lsls	r2, r2, #15
 800075e:	432a      	orrs	r2, r5
 8000760:	0252      	lsls	r2, r2, #9
 8000762:	20ff      	movs	r0, #255	; 0xff
 8000764:	0a52      	lsrs	r2, r2, #9
 8000766:	e773      	b.n	8000650 <__aeabi_fdiv+0xc0>
 8000768:	4642      	mov	r2, r8
 800076a:	016b      	lsls	r3, r5, #5
 800076c:	0155      	lsls	r5, r2, #5
 800076e:	42ab      	cmp	r3, r5
 8000770:	d21a      	bcs.n	80007a8 <__aeabi_fdiv+0x218>
 8000772:	201b      	movs	r0, #27
 8000774:	2200      	movs	r2, #0
 8000776:	3f01      	subs	r7, #1
 8000778:	2601      	movs	r6, #1
 800077a:	001c      	movs	r4, r3
 800077c:	0052      	lsls	r2, r2, #1
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	2c00      	cmp	r4, #0
 8000782:	db01      	blt.n	8000788 <__aeabi_fdiv+0x1f8>
 8000784:	429d      	cmp	r5, r3
 8000786:	d801      	bhi.n	800078c <__aeabi_fdiv+0x1fc>
 8000788:	1b5b      	subs	r3, r3, r5
 800078a:	4332      	orrs	r2, r6
 800078c:	3801      	subs	r0, #1
 800078e:	2800      	cmp	r0, #0
 8000790:	d1f3      	bne.n	800077a <__aeabi_fdiv+0x1ea>
 8000792:	1e58      	subs	r0, r3, #1
 8000794:	4183      	sbcs	r3, r0
 8000796:	4313      	orrs	r3, r2
 8000798:	001d      	movs	r5, r3
 800079a:	003b      	movs	r3, r7
 800079c:	337f      	adds	r3, #127	; 0x7f
 800079e:	000e      	movs	r6, r1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dd00      	ble.n	80007a6 <__aeabi_fdiv+0x216>
 80007a4:	e73d      	b.n	8000622 <__aeabi_fdiv+0x92>
 80007a6:	e7aa      	b.n	80006fe <__aeabi_fdiv+0x16e>
 80007a8:	201a      	movs	r0, #26
 80007aa:	2201      	movs	r2, #1
 80007ac:	1b5b      	subs	r3, r3, r5
 80007ae:	e7e3      	b.n	8000778 <__aeabi_fdiv+0x1e8>
 80007b0:	01aa      	lsls	r2, r5, #6
 80007b2:	2000      	movs	r0, #0
 80007b4:	0a52      	lsrs	r2, r2, #9
 80007b6:	e74b      	b.n	8000650 <__aeabi_fdiv+0xc0>
 80007b8:	080037a8 	.word	0x080037a8
 80007bc:	f7ffffff 	.word	0xf7ffffff
 80007c0:	080037e8 	.word	0x080037e8

080007c4 <__aeabi_fmul>:
 80007c4:	0243      	lsls	r3, r0, #9
 80007c6:	0a5b      	lsrs	r3, r3, #9
 80007c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ca:	464f      	mov	r7, r9
 80007cc:	4646      	mov	r6, r8
 80007ce:	4699      	mov	r9, r3
 80007d0:	46d6      	mov	lr, sl
 80007d2:	0fc3      	lsrs	r3, r0, #31
 80007d4:	0045      	lsls	r5, r0, #1
 80007d6:	4698      	mov	r8, r3
 80007d8:	b5c0      	push	{r6, r7, lr}
 80007da:	464b      	mov	r3, r9
 80007dc:	1c0f      	adds	r7, r1, #0
 80007de:	0e2d      	lsrs	r5, r5, #24
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fmul+0x20>
 80007e2:	e0cb      	b.n	800097c <__aeabi_fmul+0x1b8>
 80007e4:	2dff      	cmp	r5, #255	; 0xff
 80007e6:	d100      	bne.n	80007ea <__aeabi_fmul+0x26>
 80007e8:	e0cf      	b.n	800098a <__aeabi_fmul+0x1c6>
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	00db      	lsls	r3, r3, #3
 80007ee:	04d2      	lsls	r2, r2, #19
 80007f0:	431a      	orrs	r2, r3
 80007f2:	2300      	movs	r3, #0
 80007f4:	4691      	mov	r9, r2
 80007f6:	2600      	movs	r6, #0
 80007f8:	469a      	mov	sl, r3
 80007fa:	3d7f      	subs	r5, #127	; 0x7f
 80007fc:	027c      	lsls	r4, r7, #9
 80007fe:	007b      	lsls	r3, r7, #1
 8000800:	0a64      	lsrs	r4, r4, #9
 8000802:	0e1b      	lsrs	r3, r3, #24
 8000804:	0fff      	lsrs	r7, r7, #31
 8000806:	2b00      	cmp	r3, #0
 8000808:	d100      	bne.n	800080c <__aeabi_fmul+0x48>
 800080a:	e0a9      	b.n	8000960 <__aeabi_fmul+0x19c>
 800080c:	2bff      	cmp	r3, #255	; 0xff
 800080e:	d011      	beq.n	8000834 <__aeabi_fmul+0x70>
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	00e4      	lsls	r4, r4, #3
 8000814:	04d2      	lsls	r2, r2, #19
 8000816:	4314      	orrs	r4, r2
 8000818:	4642      	mov	r2, r8
 800081a:	3b7f      	subs	r3, #127	; 0x7f
 800081c:	195b      	adds	r3, r3, r5
 800081e:	407a      	eors	r2, r7
 8000820:	2000      	movs	r0, #0
 8000822:	b2d2      	uxtb	r2, r2
 8000824:	1c5d      	adds	r5, r3, #1
 8000826:	2e0a      	cmp	r6, #10
 8000828:	dd13      	ble.n	8000852 <__aeabi_fmul+0x8e>
 800082a:	003a      	movs	r2, r7
 800082c:	2e0b      	cmp	r6, #11
 800082e:	d047      	beq.n	80008c0 <__aeabi_fmul+0xfc>
 8000830:	4647      	mov	r7, r8
 8000832:	e03f      	b.n	80008b4 <__aeabi_fmul+0xf0>
 8000834:	002b      	movs	r3, r5
 8000836:	33ff      	adds	r3, #255	; 0xff
 8000838:	2c00      	cmp	r4, #0
 800083a:	d11e      	bne.n	800087a <__aeabi_fmul+0xb6>
 800083c:	2202      	movs	r2, #2
 800083e:	4316      	orrs	r6, r2
 8000840:	4642      	mov	r2, r8
 8000842:	3501      	adds	r5, #1
 8000844:	407a      	eors	r2, r7
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	35ff      	adds	r5, #255	; 0xff
 800084a:	2e0a      	cmp	r6, #10
 800084c:	dd00      	ble.n	8000850 <__aeabi_fmul+0x8c>
 800084e:	e0e4      	b.n	8000a1a <__aeabi_fmul+0x256>
 8000850:	2002      	movs	r0, #2
 8000852:	2e02      	cmp	r6, #2
 8000854:	dc1c      	bgt.n	8000890 <__aeabi_fmul+0xcc>
 8000856:	3e01      	subs	r6, #1
 8000858:	2e01      	cmp	r6, #1
 800085a:	d842      	bhi.n	80008e2 <__aeabi_fmul+0x11e>
 800085c:	2802      	cmp	r0, #2
 800085e:	d03d      	beq.n	80008dc <__aeabi_fmul+0x118>
 8000860:	2801      	cmp	r0, #1
 8000862:	d166      	bne.n	8000932 <__aeabi_fmul+0x16e>
 8000864:	2000      	movs	r0, #0
 8000866:	2100      	movs	r1, #0
 8000868:	05c0      	lsls	r0, r0, #23
 800086a:	4308      	orrs	r0, r1
 800086c:	07d2      	lsls	r2, r2, #31
 800086e:	4310      	orrs	r0, r2
 8000870:	bce0      	pop	{r5, r6, r7}
 8000872:	46ba      	mov	sl, r7
 8000874:	46b1      	mov	r9, r6
 8000876:	46a8      	mov	r8, r5
 8000878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800087a:	2203      	movs	r2, #3
 800087c:	4316      	orrs	r6, r2
 800087e:	4642      	mov	r2, r8
 8000880:	3501      	adds	r5, #1
 8000882:	407a      	eors	r2, r7
 8000884:	b2d2      	uxtb	r2, r2
 8000886:	35ff      	adds	r5, #255	; 0xff
 8000888:	2e0a      	cmp	r6, #10
 800088a:	dd00      	ble.n	800088e <__aeabi_fmul+0xca>
 800088c:	e0e4      	b.n	8000a58 <__aeabi_fmul+0x294>
 800088e:	2003      	movs	r0, #3
 8000890:	2101      	movs	r1, #1
 8000892:	40b1      	lsls	r1, r6
 8000894:	26a6      	movs	r6, #166	; 0xa6
 8000896:	00f6      	lsls	r6, r6, #3
 8000898:	4231      	tst	r1, r6
 800089a:	d10a      	bne.n	80008b2 <__aeabi_fmul+0xee>
 800089c:	2690      	movs	r6, #144	; 0x90
 800089e:	00b6      	lsls	r6, r6, #2
 80008a0:	4231      	tst	r1, r6
 80008a2:	d116      	bne.n	80008d2 <__aeabi_fmul+0x10e>
 80008a4:	3eb9      	subs	r6, #185	; 0xb9
 80008a6:	3eff      	subs	r6, #255	; 0xff
 80008a8:	420e      	tst	r6, r1
 80008aa:	d01a      	beq.n	80008e2 <__aeabi_fmul+0x11e>
 80008ac:	46a1      	mov	r9, r4
 80008ae:	4682      	mov	sl, r0
 80008b0:	e000      	b.n	80008b4 <__aeabi_fmul+0xf0>
 80008b2:	0017      	movs	r7, r2
 80008b4:	4653      	mov	r3, sl
 80008b6:	003a      	movs	r2, r7
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d00f      	beq.n	80008dc <__aeabi_fmul+0x118>
 80008bc:	464c      	mov	r4, r9
 80008be:	4650      	mov	r0, sl
 80008c0:	2803      	cmp	r0, #3
 80008c2:	d1cd      	bne.n	8000860 <__aeabi_fmul+0x9c>
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	03c9      	lsls	r1, r1, #15
 80008c8:	4321      	orrs	r1, r4
 80008ca:	0249      	lsls	r1, r1, #9
 80008cc:	20ff      	movs	r0, #255	; 0xff
 80008ce:	0a49      	lsrs	r1, r1, #9
 80008d0:	e7ca      	b.n	8000868 <__aeabi_fmul+0xa4>
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	2200      	movs	r2, #0
 80008d6:	20ff      	movs	r0, #255	; 0xff
 80008d8:	03c9      	lsls	r1, r1, #15
 80008da:	e7c5      	b.n	8000868 <__aeabi_fmul+0xa4>
 80008dc:	20ff      	movs	r0, #255	; 0xff
 80008de:	2100      	movs	r1, #0
 80008e0:	e7c2      	b.n	8000868 <__aeabi_fmul+0xa4>
 80008e2:	0c20      	lsrs	r0, r4, #16
 80008e4:	4649      	mov	r1, r9
 80008e6:	0424      	lsls	r4, r4, #16
 80008e8:	0c24      	lsrs	r4, r4, #16
 80008ea:	0027      	movs	r7, r4
 80008ec:	0c0e      	lsrs	r6, r1, #16
 80008ee:	0409      	lsls	r1, r1, #16
 80008f0:	0c09      	lsrs	r1, r1, #16
 80008f2:	4374      	muls	r4, r6
 80008f4:	434f      	muls	r7, r1
 80008f6:	4346      	muls	r6, r0
 80008f8:	4348      	muls	r0, r1
 80008fa:	0c39      	lsrs	r1, r7, #16
 80008fc:	1900      	adds	r0, r0, r4
 80008fe:	1809      	adds	r1, r1, r0
 8000900:	428c      	cmp	r4, r1
 8000902:	d903      	bls.n	800090c <__aeabi_fmul+0x148>
 8000904:	2080      	movs	r0, #128	; 0x80
 8000906:	0240      	lsls	r0, r0, #9
 8000908:	4684      	mov	ip, r0
 800090a:	4466      	add	r6, ip
 800090c:	043f      	lsls	r7, r7, #16
 800090e:	0408      	lsls	r0, r1, #16
 8000910:	0c3f      	lsrs	r7, r7, #16
 8000912:	19c0      	adds	r0, r0, r7
 8000914:	0184      	lsls	r4, r0, #6
 8000916:	1e67      	subs	r7, r4, #1
 8000918:	41bc      	sbcs	r4, r7
 800091a:	0c09      	lsrs	r1, r1, #16
 800091c:	0e80      	lsrs	r0, r0, #26
 800091e:	1989      	adds	r1, r1, r6
 8000920:	4304      	orrs	r4, r0
 8000922:	0189      	lsls	r1, r1, #6
 8000924:	430c      	orrs	r4, r1
 8000926:	0109      	lsls	r1, r1, #4
 8000928:	d571      	bpl.n	8000a0e <__aeabi_fmul+0x24a>
 800092a:	2301      	movs	r3, #1
 800092c:	0861      	lsrs	r1, r4, #1
 800092e:	401c      	ands	r4, r3
 8000930:	430c      	orrs	r4, r1
 8000932:	002b      	movs	r3, r5
 8000934:	337f      	adds	r3, #127	; 0x7f
 8000936:	2b00      	cmp	r3, #0
 8000938:	dd51      	ble.n	80009de <__aeabi_fmul+0x21a>
 800093a:	0761      	lsls	r1, r4, #29
 800093c:	d004      	beq.n	8000948 <__aeabi_fmul+0x184>
 800093e:	210f      	movs	r1, #15
 8000940:	4021      	ands	r1, r4
 8000942:	2904      	cmp	r1, #4
 8000944:	d000      	beq.n	8000948 <__aeabi_fmul+0x184>
 8000946:	3404      	adds	r4, #4
 8000948:	0121      	lsls	r1, r4, #4
 800094a:	d503      	bpl.n	8000954 <__aeabi_fmul+0x190>
 800094c:	4b43      	ldr	r3, [pc, #268]	; (8000a5c <__aeabi_fmul+0x298>)
 800094e:	401c      	ands	r4, r3
 8000950:	002b      	movs	r3, r5
 8000952:	3380      	adds	r3, #128	; 0x80
 8000954:	2bfe      	cmp	r3, #254	; 0xfe
 8000956:	dcc1      	bgt.n	80008dc <__aeabi_fmul+0x118>
 8000958:	01a1      	lsls	r1, r4, #6
 800095a:	0a49      	lsrs	r1, r1, #9
 800095c:	b2d8      	uxtb	r0, r3
 800095e:	e783      	b.n	8000868 <__aeabi_fmul+0xa4>
 8000960:	2c00      	cmp	r4, #0
 8000962:	d12c      	bne.n	80009be <__aeabi_fmul+0x1fa>
 8000964:	2301      	movs	r3, #1
 8000966:	4642      	mov	r2, r8
 8000968:	431e      	orrs	r6, r3
 800096a:	002b      	movs	r3, r5
 800096c:	407a      	eors	r2, r7
 800096e:	2001      	movs	r0, #1
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	1c5d      	adds	r5, r3, #1
 8000974:	2e0a      	cmp	r6, #10
 8000976:	dd00      	ble.n	800097a <__aeabi_fmul+0x1b6>
 8000978:	e757      	b.n	800082a <__aeabi_fmul+0x66>
 800097a:	e76a      	b.n	8000852 <__aeabi_fmul+0x8e>
 800097c:	2b00      	cmp	r3, #0
 800097e:	d110      	bne.n	80009a2 <__aeabi_fmul+0x1de>
 8000980:	2301      	movs	r3, #1
 8000982:	2604      	movs	r6, #4
 8000984:	2500      	movs	r5, #0
 8000986:	469a      	mov	sl, r3
 8000988:	e738      	b.n	80007fc <__aeabi_fmul+0x38>
 800098a:	2b00      	cmp	r3, #0
 800098c:	d104      	bne.n	8000998 <__aeabi_fmul+0x1d4>
 800098e:	2302      	movs	r3, #2
 8000990:	2608      	movs	r6, #8
 8000992:	25ff      	movs	r5, #255	; 0xff
 8000994:	469a      	mov	sl, r3
 8000996:	e731      	b.n	80007fc <__aeabi_fmul+0x38>
 8000998:	2303      	movs	r3, #3
 800099a:	260c      	movs	r6, #12
 800099c:	25ff      	movs	r5, #255	; 0xff
 800099e:	469a      	mov	sl, r3
 80009a0:	e72c      	b.n	80007fc <__aeabi_fmul+0x38>
 80009a2:	4648      	mov	r0, r9
 80009a4:	f000 fa9e 	bl	8000ee4 <__clzsi2>
 80009a8:	464a      	mov	r2, r9
 80009aa:	1f43      	subs	r3, r0, #5
 80009ac:	2576      	movs	r5, #118	; 0x76
 80009ae:	409a      	lsls	r2, r3
 80009b0:	2300      	movs	r3, #0
 80009b2:	426d      	negs	r5, r5
 80009b4:	4691      	mov	r9, r2
 80009b6:	2600      	movs	r6, #0
 80009b8:	469a      	mov	sl, r3
 80009ba:	1a2d      	subs	r5, r5, r0
 80009bc:	e71e      	b.n	80007fc <__aeabi_fmul+0x38>
 80009be:	0020      	movs	r0, r4
 80009c0:	f000 fa90 	bl	8000ee4 <__clzsi2>
 80009c4:	4642      	mov	r2, r8
 80009c6:	1f43      	subs	r3, r0, #5
 80009c8:	409c      	lsls	r4, r3
 80009ca:	1a2b      	subs	r3, r5, r0
 80009cc:	3b76      	subs	r3, #118	; 0x76
 80009ce:	407a      	eors	r2, r7
 80009d0:	2000      	movs	r0, #0
 80009d2:	b2d2      	uxtb	r2, r2
 80009d4:	1c5d      	adds	r5, r3, #1
 80009d6:	2e0a      	cmp	r6, #10
 80009d8:	dd00      	ble.n	80009dc <__aeabi_fmul+0x218>
 80009da:	e726      	b.n	800082a <__aeabi_fmul+0x66>
 80009dc:	e739      	b.n	8000852 <__aeabi_fmul+0x8e>
 80009de:	2101      	movs	r1, #1
 80009e0:	1acb      	subs	r3, r1, r3
 80009e2:	2b1b      	cmp	r3, #27
 80009e4:	dd00      	ble.n	80009e8 <__aeabi_fmul+0x224>
 80009e6:	e73d      	b.n	8000864 <__aeabi_fmul+0xa0>
 80009e8:	359e      	adds	r5, #158	; 0x9e
 80009ea:	0021      	movs	r1, r4
 80009ec:	40ac      	lsls	r4, r5
 80009ee:	40d9      	lsrs	r1, r3
 80009f0:	1e63      	subs	r3, r4, #1
 80009f2:	419c      	sbcs	r4, r3
 80009f4:	4321      	orrs	r1, r4
 80009f6:	074b      	lsls	r3, r1, #29
 80009f8:	d004      	beq.n	8000a04 <__aeabi_fmul+0x240>
 80009fa:	230f      	movs	r3, #15
 80009fc:	400b      	ands	r3, r1
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	d000      	beq.n	8000a04 <__aeabi_fmul+0x240>
 8000a02:	3104      	adds	r1, #4
 8000a04:	014b      	lsls	r3, r1, #5
 8000a06:	d504      	bpl.n	8000a12 <__aeabi_fmul+0x24e>
 8000a08:	2001      	movs	r0, #1
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	e72c      	b.n	8000868 <__aeabi_fmul+0xa4>
 8000a0e:	001d      	movs	r5, r3
 8000a10:	e78f      	b.n	8000932 <__aeabi_fmul+0x16e>
 8000a12:	0189      	lsls	r1, r1, #6
 8000a14:	2000      	movs	r0, #0
 8000a16:	0a49      	lsrs	r1, r1, #9
 8000a18:	e726      	b.n	8000868 <__aeabi_fmul+0xa4>
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	2e0f      	cmp	r6, #15
 8000a1e:	d10c      	bne.n	8000a3a <__aeabi_fmul+0x276>
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	464b      	mov	r3, r9
 8000a24:	03c9      	lsls	r1, r1, #15
 8000a26:	420b      	tst	r3, r1
 8000a28:	d00d      	beq.n	8000a46 <__aeabi_fmul+0x282>
 8000a2a:	420c      	tst	r4, r1
 8000a2c:	d10b      	bne.n	8000a46 <__aeabi_fmul+0x282>
 8000a2e:	4321      	orrs	r1, r4
 8000a30:	0249      	lsls	r1, r1, #9
 8000a32:	003a      	movs	r2, r7
 8000a34:	20ff      	movs	r0, #255	; 0xff
 8000a36:	0a49      	lsrs	r1, r1, #9
 8000a38:	e716      	b.n	8000868 <__aeabi_fmul+0xa4>
 8000a3a:	2e0b      	cmp	r6, #11
 8000a3c:	d000      	beq.n	8000a40 <__aeabi_fmul+0x27c>
 8000a3e:	e6f7      	b.n	8000830 <__aeabi_fmul+0x6c>
 8000a40:	46a1      	mov	r9, r4
 8000a42:	469a      	mov	sl, r3
 8000a44:	e736      	b.n	80008b4 <__aeabi_fmul+0xf0>
 8000a46:	2180      	movs	r1, #128	; 0x80
 8000a48:	464b      	mov	r3, r9
 8000a4a:	03c9      	lsls	r1, r1, #15
 8000a4c:	4319      	orrs	r1, r3
 8000a4e:	0249      	lsls	r1, r1, #9
 8000a50:	4642      	mov	r2, r8
 8000a52:	20ff      	movs	r0, #255	; 0xff
 8000a54:	0a49      	lsrs	r1, r1, #9
 8000a56:	e707      	b.n	8000868 <__aeabi_fmul+0xa4>
 8000a58:	2303      	movs	r3, #3
 8000a5a:	e7df      	b.n	8000a1c <__aeabi_fmul+0x258>
 8000a5c:	f7ffffff 	.word	0xf7ffffff

08000a60 <__aeabi_fsub>:
 8000a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a62:	46c6      	mov	lr, r8
 8000a64:	0243      	lsls	r3, r0, #9
 8000a66:	0a5b      	lsrs	r3, r3, #9
 8000a68:	0045      	lsls	r5, r0, #1
 8000a6a:	00da      	lsls	r2, r3, #3
 8000a6c:	0fc4      	lsrs	r4, r0, #31
 8000a6e:	0248      	lsls	r0, r1, #9
 8000a70:	004f      	lsls	r7, r1, #1
 8000a72:	4694      	mov	ip, r2
 8000a74:	0a42      	lsrs	r2, r0, #9
 8000a76:	001e      	movs	r6, r3
 8000a78:	4690      	mov	r8, r2
 8000a7a:	b500      	push	{lr}
 8000a7c:	0e2d      	lsrs	r5, r5, #24
 8000a7e:	0e3f      	lsrs	r7, r7, #24
 8000a80:	0fc9      	lsrs	r1, r1, #31
 8000a82:	0980      	lsrs	r0, r0, #6
 8000a84:	2fff      	cmp	r7, #255	; 0xff
 8000a86:	d059      	beq.n	8000b3c <__aeabi_fsub+0xdc>
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4051      	eors	r1, r2
 8000a8c:	428c      	cmp	r4, r1
 8000a8e:	d039      	beq.n	8000b04 <__aeabi_fsub+0xa4>
 8000a90:	1bea      	subs	r2, r5, r7
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd58      	ble.n	8000b48 <__aeabi_fsub+0xe8>
 8000a96:	2f00      	cmp	r7, #0
 8000a98:	d068      	beq.n	8000b6c <__aeabi_fsub+0x10c>
 8000a9a:	2dff      	cmp	r5, #255	; 0xff
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_fsub+0x40>
 8000a9e:	e0d1      	b.n	8000c44 <__aeabi_fsub+0x1e4>
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	04db      	lsls	r3, r3, #19
 8000aa4:	4318      	orrs	r0, r3
 8000aa6:	2a1b      	cmp	r2, #27
 8000aa8:	dc00      	bgt.n	8000aac <__aeabi_fsub+0x4c>
 8000aaa:	e0e3      	b.n	8000c74 <__aeabi_fsub+0x214>
 8000aac:	2301      	movs	r3, #1
 8000aae:	4662      	mov	r2, ip
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	015a      	lsls	r2, r3, #5
 8000ab4:	d400      	bmi.n	8000ab8 <__aeabi_fsub+0x58>
 8000ab6:	e0ac      	b.n	8000c12 <__aeabi_fsub+0x1b2>
 8000ab8:	019b      	lsls	r3, r3, #6
 8000aba:	099e      	lsrs	r6, r3, #6
 8000abc:	0030      	movs	r0, r6
 8000abe:	f000 fa11 	bl	8000ee4 <__clzsi2>
 8000ac2:	0033      	movs	r3, r6
 8000ac4:	3805      	subs	r0, #5
 8000ac6:	4083      	lsls	r3, r0
 8000ac8:	4285      	cmp	r5, r0
 8000aca:	dc00      	bgt.n	8000ace <__aeabi_fsub+0x6e>
 8000acc:	e0c6      	b.n	8000c5c <__aeabi_fsub+0x1fc>
 8000ace:	4ab2      	ldr	r2, [pc, #712]	; (8000d98 <__aeabi_fsub+0x338>)
 8000ad0:	1a2d      	subs	r5, r5, r0
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	075a      	lsls	r2, r3, #29
 8000ad6:	d004      	beq.n	8000ae2 <__aeabi_fsub+0x82>
 8000ad8:	220f      	movs	r2, #15
 8000ada:	401a      	ands	r2, r3
 8000adc:	2a04      	cmp	r2, #4
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_fsub+0x82>
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	015a      	lsls	r2, r3, #5
 8000ae4:	d400      	bmi.n	8000ae8 <__aeabi_fsub+0x88>
 8000ae6:	e097      	b.n	8000c18 <__aeabi_fsub+0x1b8>
 8000ae8:	1c6a      	adds	r2, r5, #1
 8000aea:	2dfe      	cmp	r5, #254	; 0xfe
 8000aec:	d100      	bne.n	8000af0 <__aeabi_fsub+0x90>
 8000aee:	e084      	b.n	8000bfa <__aeabi_fsub+0x19a>
 8000af0:	019b      	lsls	r3, r3, #6
 8000af2:	0a5e      	lsrs	r6, r3, #9
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	05d0      	lsls	r0, r2, #23
 8000af8:	4330      	orrs	r0, r6
 8000afa:	07e4      	lsls	r4, r4, #31
 8000afc:	4320      	orrs	r0, r4
 8000afe:	bc80      	pop	{r7}
 8000b00:	46b8      	mov	r8, r7
 8000b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b04:	1bea      	subs	r2, r5, r7
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	dd41      	ble.n	8000b8e <__aeabi_fsub+0x12e>
 8000b0a:	2f00      	cmp	r7, #0
 8000b0c:	d06b      	beq.n	8000be6 <__aeabi_fsub+0x186>
 8000b0e:	2dff      	cmp	r5, #255	; 0xff
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fsub+0xb4>
 8000b12:	e097      	b.n	8000c44 <__aeabi_fsub+0x1e4>
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	04db      	lsls	r3, r3, #19
 8000b18:	4318      	orrs	r0, r3
 8000b1a:	2a1b      	cmp	r2, #27
 8000b1c:	dc00      	bgt.n	8000b20 <__aeabi_fsub+0xc0>
 8000b1e:	e0cc      	b.n	8000cba <__aeabi_fsub+0x25a>
 8000b20:	2301      	movs	r3, #1
 8000b22:	4463      	add	r3, ip
 8000b24:	015a      	lsls	r2, r3, #5
 8000b26:	d574      	bpl.n	8000c12 <__aeabi_fsub+0x1b2>
 8000b28:	3501      	adds	r5, #1
 8000b2a:	2dff      	cmp	r5, #255	; 0xff
 8000b2c:	d065      	beq.n	8000bfa <__aeabi_fsub+0x19a>
 8000b2e:	2201      	movs	r2, #1
 8000b30:	499a      	ldr	r1, [pc, #616]	; (8000d9c <__aeabi_fsub+0x33c>)
 8000b32:	401a      	ands	r2, r3
 8000b34:	085b      	lsrs	r3, r3, #1
 8000b36:	400b      	ands	r3, r1
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	e7cb      	b.n	8000ad4 <__aeabi_fsub+0x74>
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d01f      	beq.n	8000b80 <__aeabi_fsub+0x120>
 8000b40:	428c      	cmp	r4, r1
 8000b42:	d022      	beq.n	8000b8a <__aeabi_fsub+0x12a>
 8000b44:	002a      	movs	r2, r5
 8000b46:	3aff      	subs	r2, #255	; 0xff
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	d035      	beq.n	8000bb8 <__aeabi_fsub+0x158>
 8000b4c:	1b7a      	subs	r2, r7, r5
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d000      	beq.n	8000b54 <__aeabi_fsub+0xf4>
 8000b52:	e099      	b.n	8000c88 <__aeabi_fsub+0x228>
 8000b54:	4663      	mov	r3, ip
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fsub+0xfc>
 8000b5a:	e0dd      	b.n	8000d18 <__aeabi_fsub+0x2b8>
 8000b5c:	1e53      	subs	r3, r2, #1
 8000b5e:	2a01      	cmp	r2, #1
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fsub+0x104>
 8000b62:	e105      	b.n	8000d70 <__aeabi_fsub+0x310>
 8000b64:	2aff      	cmp	r2, #255	; 0xff
 8000b66:	d06b      	beq.n	8000c40 <__aeabi_fsub+0x1e0>
 8000b68:	001a      	movs	r2, r3
 8000b6a:	e094      	b.n	8000c96 <__aeabi_fsub+0x236>
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d073      	beq.n	8000c58 <__aeabi_fsub+0x1f8>
 8000b70:	1e51      	subs	r1, r2, #1
 8000b72:	2a01      	cmp	r2, #1
 8000b74:	d100      	bne.n	8000b78 <__aeabi_fsub+0x118>
 8000b76:	e0df      	b.n	8000d38 <__aeabi_fsub+0x2d8>
 8000b78:	2aff      	cmp	r2, #255	; 0xff
 8000b7a:	d063      	beq.n	8000c44 <__aeabi_fsub+0x1e4>
 8000b7c:	000a      	movs	r2, r1
 8000b7e:	e792      	b.n	8000aa6 <__aeabi_fsub+0x46>
 8000b80:	2201      	movs	r2, #1
 8000b82:	4051      	eors	r1, r2
 8000b84:	42a1      	cmp	r1, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_fsub+0x12a>
 8000b88:	e782      	b.n	8000a90 <__aeabi_fsub+0x30>
 8000b8a:	002a      	movs	r2, r5
 8000b8c:	3aff      	subs	r2, #255	; 0xff
 8000b8e:	2a00      	cmp	r2, #0
 8000b90:	d036      	beq.n	8000c00 <__aeabi_fsub+0x1a0>
 8000b92:	1b7a      	subs	r2, r7, r5
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d100      	bne.n	8000b9a <__aeabi_fsub+0x13a>
 8000b98:	e0aa      	b.n	8000cf0 <__aeabi_fsub+0x290>
 8000b9a:	2fff      	cmp	r7, #255	; 0xff
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_fsub+0x140>
 8000b9e:	e0da      	b.n	8000d56 <__aeabi_fsub+0x2f6>
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	4661      	mov	r1, ip
 8000ba4:	04db      	lsls	r3, r3, #19
 8000ba6:	4319      	orrs	r1, r3
 8000ba8:	468c      	mov	ip, r1
 8000baa:	2a1b      	cmp	r2, #27
 8000bac:	dc00      	bgt.n	8000bb0 <__aeabi_fsub+0x150>
 8000bae:	e0d4      	b.n	8000d5a <__aeabi_fsub+0x2fa>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	003d      	movs	r5, r7
 8000bb4:	181b      	adds	r3, r3, r0
 8000bb6:	e7b5      	b.n	8000b24 <__aeabi_fsub+0xc4>
 8000bb8:	27fe      	movs	r7, #254	; 0xfe
 8000bba:	1c6a      	adds	r2, r5, #1
 8000bbc:	4217      	tst	r7, r2
 8000bbe:	d171      	bne.n	8000ca4 <__aeabi_fsub+0x244>
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d000      	beq.n	8000bc6 <__aeabi_fsub+0x166>
 8000bc4:	e09e      	b.n	8000d04 <__aeabi_fsub+0x2a4>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d100      	bne.n	8000bce <__aeabi_fsub+0x16e>
 8000bcc:	e0d5      	b.n	8000d7a <__aeabi_fsub+0x31a>
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_fsub+0x176>
 8000bd4:	e78f      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000bd6:	1a1b      	subs	r3, r3, r0
 8000bd8:	015e      	lsls	r6, r3, #5
 8000bda:	d400      	bmi.n	8000bde <__aeabi_fsub+0x17e>
 8000bdc:	e0d6      	b.n	8000d8c <__aeabi_fsub+0x32c>
 8000bde:	4663      	mov	r3, ip
 8000be0:	000c      	movs	r4, r1
 8000be2:	1ac3      	subs	r3, r0, r3
 8000be4:	e776      	b.n	8000ad4 <__aeabi_fsub+0x74>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d036      	beq.n	8000c58 <__aeabi_fsub+0x1f8>
 8000bea:	1e51      	subs	r1, r2, #1
 8000bec:	2a01      	cmp	r2, #1
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_fsub+0x192>
 8000bf0:	e09a      	b.n	8000d28 <__aeabi_fsub+0x2c8>
 8000bf2:	2aff      	cmp	r2, #255	; 0xff
 8000bf4:	d026      	beq.n	8000c44 <__aeabi_fsub+0x1e4>
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	e78f      	b.n	8000b1a <__aeabi_fsub+0xba>
 8000bfa:	22ff      	movs	r2, #255	; 0xff
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e77a      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000c00:	27fe      	movs	r7, #254	; 0xfe
 8000c02:	1c6a      	adds	r2, r5, #1
 8000c04:	4217      	tst	r7, r2
 8000c06:	d062      	beq.n	8000cce <__aeabi_fsub+0x26e>
 8000c08:	2aff      	cmp	r2, #255	; 0xff
 8000c0a:	d0f6      	beq.n	8000bfa <__aeabi_fsub+0x19a>
 8000c0c:	0015      	movs	r5, r2
 8000c0e:	4460      	add	r0, ip
 8000c10:	0843      	lsrs	r3, r0, #1
 8000c12:	075a      	lsls	r2, r3, #29
 8000c14:	d000      	beq.n	8000c18 <__aeabi_fsub+0x1b8>
 8000c16:	e75f      	b.n	8000ad8 <__aeabi_fsub+0x78>
 8000c18:	08db      	lsrs	r3, r3, #3
 8000c1a:	2dff      	cmp	r5, #255	; 0xff
 8000c1c:	d012      	beq.n	8000c44 <__aeabi_fsub+0x1e4>
 8000c1e:	025b      	lsls	r3, r3, #9
 8000c20:	0a5e      	lsrs	r6, r3, #9
 8000c22:	b2ea      	uxtb	r2, r5
 8000c24:	e767      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000c26:	4662      	mov	r2, ip
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_fsub+0x1ce>
 8000c2c:	e093      	b.n	8000d56 <__aeabi_fsub+0x2f6>
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	d008      	beq.n	8000c44 <__aeabi_fsub+0x1e4>
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	03d2      	lsls	r2, r2, #15
 8000c36:	4213      	tst	r3, r2
 8000c38:	d004      	beq.n	8000c44 <__aeabi_fsub+0x1e4>
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	4210      	tst	r0, r2
 8000c3e:	d101      	bne.n	8000c44 <__aeabi_fsub+0x1e4>
 8000c40:	000c      	movs	r4, r1
 8000c42:	4643      	mov	r3, r8
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d0d8      	beq.n	8000bfa <__aeabi_fsub+0x19a>
 8000c48:	2680      	movs	r6, #128	; 0x80
 8000c4a:	03f6      	lsls	r6, r6, #15
 8000c4c:	431e      	orrs	r6, r3
 8000c4e:	0276      	lsls	r6, r6, #9
 8000c50:	22ff      	movs	r2, #255	; 0xff
 8000c52:	0a76      	lsrs	r6, r6, #9
 8000c54:	e74f      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000c56:	4643      	mov	r3, r8
 8000c58:	0015      	movs	r5, r2
 8000c5a:	e7de      	b.n	8000c1a <__aeabi_fsub+0x1ba>
 8000c5c:	2220      	movs	r2, #32
 8000c5e:	1b40      	subs	r0, r0, r5
 8000c60:	3001      	adds	r0, #1
 8000c62:	1a12      	subs	r2, r2, r0
 8000c64:	0019      	movs	r1, r3
 8000c66:	4093      	lsls	r3, r2
 8000c68:	40c1      	lsrs	r1, r0
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	4193      	sbcs	r3, r2
 8000c6e:	2500      	movs	r5, #0
 8000c70:	430b      	orrs	r3, r1
 8000c72:	e72f      	b.n	8000ad4 <__aeabi_fsub+0x74>
 8000c74:	2320      	movs	r3, #32
 8000c76:	1a9b      	subs	r3, r3, r2
 8000c78:	0001      	movs	r1, r0
 8000c7a:	4098      	lsls	r0, r3
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	40d1      	lsrs	r1, r2
 8000c80:	1e5a      	subs	r2, r3, #1
 8000c82:	4193      	sbcs	r3, r2
 8000c84:	430b      	orrs	r3, r1
 8000c86:	e712      	b.n	8000aae <__aeabi_fsub+0x4e>
 8000c88:	2fff      	cmp	r7, #255	; 0xff
 8000c8a:	d0d9      	beq.n	8000c40 <__aeabi_fsub+0x1e0>
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	4664      	mov	r4, ip
 8000c90:	04db      	lsls	r3, r3, #19
 8000c92:	431c      	orrs	r4, r3
 8000c94:	46a4      	mov	ip, r4
 8000c96:	2a1b      	cmp	r2, #27
 8000c98:	dd52      	ble.n	8000d40 <__aeabi_fsub+0x2e0>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	000c      	movs	r4, r1
 8000c9e:	003d      	movs	r5, r7
 8000ca0:	1ac3      	subs	r3, r0, r3
 8000ca2:	e706      	b.n	8000ab2 <__aeabi_fsub+0x52>
 8000ca4:	4663      	mov	r3, ip
 8000ca6:	1a1e      	subs	r6, r3, r0
 8000ca8:	0173      	lsls	r3, r6, #5
 8000caa:	d439      	bmi.n	8000d20 <__aeabi_fsub+0x2c0>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d000      	beq.n	8000cb2 <__aeabi_fsub+0x252>
 8000cb0:	e704      	b.n	8000abc <__aeabi_fsub+0x5c>
 8000cb2:	2400      	movs	r4, #0
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	e71d      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000cba:	2320      	movs	r3, #32
 8000cbc:	1a9b      	subs	r3, r3, r2
 8000cbe:	0001      	movs	r1, r0
 8000cc0:	4098      	lsls	r0, r3
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	40d1      	lsrs	r1, r2
 8000cc6:	1e5a      	subs	r2, r3, #1
 8000cc8:	4193      	sbcs	r3, r2
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	e729      	b.n	8000b22 <__aeabi_fsub+0xc2>
 8000cce:	2d00      	cmp	r5, #0
 8000cd0:	d1a9      	bne.n	8000c26 <__aeabi_fsub+0x1c6>
 8000cd2:	4663      	mov	r3, ip
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d056      	beq.n	8000d86 <__aeabi_fsub+0x326>
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_fsub+0x280>
 8000cde:	e70a      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	4463      	add	r3, ip
 8000ce4:	015a      	lsls	r2, r3, #5
 8000ce6:	d594      	bpl.n	8000c12 <__aeabi_fsub+0x1b2>
 8000ce8:	4a2b      	ldr	r2, [pc, #172]	; (8000d98 <__aeabi_fsub+0x338>)
 8000cea:	3501      	adds	r5, #1
 8000cec:	4013      	ands	r3, r2
 8000cee:	e790      	b.n	8000c12 <__aeabi_fsub+0x1b2>
 8000cf0:	4663      	mov	r3, ip
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0af      	beq.n	8000c56 <__aeabi_fsub+0x1f6>
 8000cf6:	1e53      	subs	r3, r2, #1
 8000cf8:	2a01      	cmp	r2, #1
 8000cfa:	d015      	beq.n	8000d28 <__aeabi_fsub+0x2c8>
 8000cfc:	2aff      	cmp	r2, #255	; 0xff
 8000cfe:	d02a      	beq.n	8000d56 <__aeabi_fsub+0x2f6>
 8000d00:	001a      	movs	r2, r3
 8000d02:	e752      	b.n	8000baa <__aeabi_fsub+0x14a>
 8000d04:	4662      	mov	r2, ip
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	d191      	bne.n	8000c2e <__aeabi_fsub+0x1ce>
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	d198      	bne.n	8000c40 <__aeabi_fsub+0x1e0>
 8000d0e:	2680      	movs	r6, #128	; 0x80
 8000d10:	2400      	movs	r4, #0
 8000d12:	22ff      	movs	r2, #255	; 0xff
 8000d14:	03f6      	lsls	r6, r6, #15
 8000d16:	e6ee      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000d18:	000c      	movs	r4, r1
 8000d1a:	4643      	mov	r3, r8
 8000d1c:	0015      	movs	r5, r2
 8000d1e:	e77c      	b.n	8000c1a <__aeabi_fsub+0x1ba>
 8000d20:	4663      	mov	r3, ip
 8000d22:	000c      	movs	r4, r1
 8000d24:	1ac6      	subs	r6, r0, r3
 8000d26:	e6c9      	b.n	8000abc <__aeabi_fsub+0x5c>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	4463      	add	r3, ip
 8000d2c:	2501      	movs	r5, #1
 8000d2e:	015a      	lsls	r2, r3, #5
 8000d30:	d400      	bmi.n	8000d34 <__aeabi_fsub+0x2d4>
 8000d32:	e76e      	b.n	8000c12 <__aeabi_fsub+0x1b2>
 8000d34:	2502      	movs	r5, #2
 8000d36:	e6fa      	b.n	8000b2e <__aeabi_fsub+0xce>
 8000d38:	4663      	mov	r3, ip
 8000d3a:	2501      	movs	r5, #1
 8000d3c:	1a1b      	subs	r3, r3, r0
 8000d3e:	e6b8      	b.n	8000ab2 <__aeabi_fsub+0x52>
 8000d40:	4664      	mov	r4, ip
 8000d42:	2320      	movs	r3, #32
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	4662      	mov	r2, ip
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	1e5a      	subs	r2, r3, #1
 8000d50:	4193      	sbcs	r3, r2
 8000d52:	4323      	orrs	r3, r4
 8000d54:	e7a2      	b.n	8000c9c <__aeabi_fsub+0x23c>
 8000d56:	4643      	mov	r3, r8
 8000d58:	e774      	b.n	8000c44 <__aeabi_fsub+0x1e4>
 8000d5a:	4661      	mov	r1, ip
 8000d5c:	2320      	movs	r3, #32
 8000d5e:	40d1      	lsrs	r1, r2
 8000d60:	1a9b      	subs	r3, r3, r2
 8000d62:	4662      	mov	r2, ip
 8000d64:	409a      	lsls	r2, r3
 8000d66:	0013      	movs	r3, r2
 8000d68:	1e5a      	subs	r2, r3, #1
 8000d6a:	4193      	sbcs	r3, r2
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	e720      	b.n	8000bb2 <__aeabi_fsub+0x152>
 8000d70:	4663      	mov	r3, ip
 8000d72:	000c      	movs	r4, r1
 8000d74:	2501      	movs	r5, #1
 8000d76:	1ac3      	subs	r3, r0, r3
 8000d78:	e69b      	b.n	8000ab2 <__aeabi_fsub+0x52>
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	d099      	beq.n	8000cb2 <__aeabi_fsub+0x252>
 8000d7e:	000c      	movs	r4, r1
 8000d80:	4646      	mov	r6, r8
 8000d82:	2200      	movs	r2, #0
 8000d84:	e6b7      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000d86:	4646      	mov	r6, r8
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e6b4      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d000      	beq.n	8000d92 <__aeabi_fsub+0x332>
 8000d90:	e73f      	b.n	8000c12 <__aeabi_fsub+0x1b2>
 8000d92:	2400      	movs	r4, #0
 8000d94:	2600      	movs	r6, #0
 8000d96:	e6ae      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000d98:	fbffffff 	.word	0xfbffffff
 8000d9c:	7dffffff 	.word	0x7dffffff

08000da0 <__aeabi_f2iz>:
 8000da0:	0241      	lsls	r1, r0, #9
 8000da2:	0042      	lsls	r2, r0, #1
 8000da4:	0fc3      	lsrs	r3, r0, #31
 8000da6:	0a49      	lsrs	r1, r1, #9
 8000da8:	2000      	movs	r0, #0
 8000daa:	0e12      	lsrs	r2, r2, #24
 8000dac:	2a7e      	cmp	r2, #126	; 0x7e
 8000dae:	dd03      	ble.n	8000db8 <__aeabi_f2iz+0x18>
 8000db0:	2a9d      	cmp	r2, #157	; 0x9d
 8000db2:	dd02      	ble.n	8000dba <__aeabi_f2iz+0x1a>
 8000db4:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <__aeabi_f2iz+0x3c>)
 8000db6:	1898      	adds	r0, r3, r2
 8000db8:	4770      	bx	lr
 8000dba:	2080      	movs	r0, #128	; 0x80
 8000dbc:	0400      	lsls	r0, r0, #16
 8000dbe:	4301      	orrs	r1, r0
 8000dc0:	2a95      	cmp	r2, #149	; 0x95
 8000dc2:	dc07      	bgt.n	8000dd4 <__aeabi_f2iz+0x34>
 8000dc4:	2096      	movs	r0, #150	; 0x96
 8000dc6:	1a82      	subs	r2, r0, r2
 8000dc8:	40d1      	lsrs	r1, r2
 8000dca:	4248      	negs	r0, r1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1f3      	bne.n	8000db8 <__aeabi_f2iz+0x18>
 8000dd0:	0008      	movs	r0, r1
 8000dd2:	e7f1      	b.n	8000db8 <__aeabi_f2iz+0x18>
 8000dd4:	3a96      	subs	r2, #150	; 0x96
 8000dd6:	4091      	lsls	r1, r2
 8000dd8:	e7f7      	b.n	8000dca <__aeabi_f2iz+0x2a>
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	7fffffff 	.word	0x7fffffff

08000de0 <__aeabi_ui2f>:
 8000de0:	b570      	push	{r4, r5, r6, lr}
 8000de2:	1e04      	subs	r4, r0, #0
 8000de4:	d00e      	beq.n	8000e04 <__aeabi_ui2f+0x24>
 8000de6:	f000 f87d 	bl	8000ee4 <__clzsi2>
 8000dea:	239e      	movs	r3, #158	; 0x9e
 8000dec:	0001      	movs	r1, r0
 8000dee:	1a1b      	subs	r3, r3, r0
 8000df0:	2b96      	cmp	r3, #150	; 0x96
 8000df2:	dc0c      	bgt.n	8000e0e <__aeabi_ui2f+0x2e>
 8000df4:	2808      	cmp	r0, #8
 8000df6:	d02c      	beq.n	8000e52 <__aeabi_ui2f+0x72>
 8000df8:	3908      	subs	r1, #8
 8000dfa:	408c      	lsls	r4, r1
 8000dfc:	0264      	lsls	r4, r4, #9
 8000dfe:	0a64      	lsrs	r4, r4, #9
 8000e00:	b2d8      	uxtb	r0, r3
 8000e02:	e001      	b.n	8000e08 <__aeabi_ui2f+0x28>
 8000e04:	2000      	movs	r0, #0
 8000e06:	2400      	movs	r4, #0
 8000e08:	05c0      	lsls	r0, r0, #23
 8000e0a:	4320      	orrs	r0, r4
 8000e0c:	bd70      	pop	{r4, r5, r6, pc}
 8000e0e:	2b99      	cmp	r3, #153	; 0x99
 8000e10:	dd0a      	ble.n	8000e28 <__aeabi_ui2f+0x48>
 8000e12:	0002      	movs	r2, r0
 8000e14:	0020      	movs	r0, r4
 8000e16:	321b      	adds	r2, #27
 8000e18:	4090      	lsls	r0, r2
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	1e50      	subs	r0, r2, #1
 8000e1e:	4182      	sbcs	r2, r0
 8000e20:	2005      	movs	r0, #5
 8000e22:	1a40      	subs	r0, r0, r1
 8000e24:	40c4      	lsrs	r4, r0
 8000e26:	4314      	orrs	r4, r2
 8000e28:	2905      	cmp	r1, #5
 8000e2a:	dc16      	bgt.n	8000e5a <__aeabi_ui2f+0x7a>
 8000e2c:	0022      	movs	r2, r4
 8000e2e:	480f      	ldr	r0, [pc, #60]	; (8000e6c <__aeabi_ui2f+0x8c>)
 8000e30:	4002      	ands	r2, r0
 8000e32:	0765      	lsls	r5, r4, #29
 8000e34:	d009      	beq.n	8000e4a <__aeabi_ui2f+0x6a>
 8000e36:	250f      	movs	r5, #15
 8000e38:	402c      	ands	r4, r5
 8000e3a:	2c04      	cmp	r4, #4
 8000e3c:	d005      	beq.n	8000e4a <__aeabi_ui2f+0x6a>
 8000e3e:	3204      	adds	r2, #4
 8000e40:	0154      	lsls	r4, r2, #5
 8000e42:	d502      	bpl.n	8000e4a <__aeabi_ui2f+0x6a>
 8000e44:	239f      	movs	r3, #159	; 0x9f
 8000e46:	4002      	ands	r2, r0
 8000e48:	1a5b      	subs	r3, r3, r1
 8000e4a:	0192      	lsls	r2, r2, #6
 8000e4c:	0a54      	lsrs	r4, r2, #9
 8000e4e:	b2d8      	uxtb	r0, r3
 8000e50:	e7da      	b.n	8000e08 <__aeabi_ui2f+0x28>
 8000e52:	0264      	lsls	r4, r4, #9
 8000e54:	2096      	movs	r0, #150	; 0x96
 8000e56:	0a64      	lsrs	r4, r4, #9
 8000e58:	e7d6      	b.n	8000e08 <__aeabi_ui2f+0x28>
 8000e5a:	1f4a      	subs	r2, r1, #5
 8000e5c:	4094      	lsls	r4, r2
 8000e5e:	0022      	movs	r2, r4
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <__aeabi_ui2f+0x8c>)
 8000e62:	4002      	ands	r2, r0
 8000e64:	0765      	lsls	r5, r4, #29
 8000e66:	d0f0      	beq.n	8000e4a <__aeabi_ui2f+0x6a>
 8000e68:	e7e5      	b.n	8000e36 <__aeabi_ui2f+0x56>
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	fbffffff 	.word	0xfbffffff

08000e70 <__aeabi_cfrcmple>:
 8000e70:	4684      	mov	ip, r0
 8000e72:	0008      	movs	r0, r1
 8000e74:	4661      	mov	r1, ip
 8000e76:	e7ff      	b.n	8000e78 <__aeabi_cfcmpeq>

08000e78 <__aeabi_cfcmpeq>:
 8000e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000e7a:	f000 f8bd 	bl	8000ff8 <__lesf2>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d401      	bmi.n	8000e86 <__aeabi_cfcmpeq+0xe>
 8000e82:	2100      	movs	r1, #0
 8000e84:	42c8      	cmn	r0, r1
 8000e86:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000e88 <__aeabi_fcmpeq>:
 8000e88:	b510      	push	{r4, lr}
 8000e8a:	f000 f849 	bl	8000f20 <__eqsf2>
 8000e8e:	4240      	negs	r0, r0
 8000e90:	3001      	adds	r0, #1
 8000e92:	bd10      	pop	{r4, pc}

08000e94 <__aeabi_fcmplt>:
 8000e94:	b510      	push	{r4, lr}
 8000e96:	f000 f8af 	bl	8000ff8 <__lesf2>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	db01      	blt.n	8000ea2 <__aeabi_fcmplt+0xe>
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	bd10      	pop	{r4, pc}
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	bd10      	pop	{r4, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)

08000ea8 <__aeabi_fcmple>:
 8000ea8:	b510      	push	{r4, lr}
 8000eaa:	f000 f8a5 	bl	8000ff8 <__lesf2>
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	dd01      	ble.n	8000eb6 <__aeabi_fcmple+0xe>
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	bd10      	pop	{r4, pc}
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	bd10      	pop	{r4, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)

08000ebc <__aeabi_fcmpgt>:
 8000ebc:	b510      	push	{r4, lr}
 8000ebe:	f000 f855 	bl	8000f6c <__gesf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	dc01      	bgt.n	8000eca <__aeabi_fcmpgt+0xe>
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	bd10      	pop	{r4, pc}
 8000eca:	2001      	movs	r0, #1
 8000ecc:	bd10      	pop	{r4, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)

08000ed0 <__aeabi_fcmpge>:
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	f000 f84b 	bl	8000f6c <__gesf2>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	da01      	bge.n	8000ede <__aeabi_fcmpge+0xe>
 8000eda:	2000      	movs	r0, #0
 8000edc:	bd10      	pop	{r4, pc}
 8000ede:	2001      	movs	r0, #1
 8000ee0:	bd10      	pop	{r4, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)

08000ee4 <__clzsi2>:
 8000ee4:	211c      	movs	r1, #28
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	041b      	lsls	r3, r3, #16
 8000eea:	4298      	cmp	r0, r3
 8000eec:	d301      	bcc.n	8000ef2 <__clzsi2+0xe>
 8000eee:	0c00      	lsrs	r0, r0, #16
 8000ef0:	3910      	subs	r1, #16
 8000ef2:	0a1b      	lsrs	r3, r3, #8
 8000ef4:	4298      	cmp	r0, r3
 8000ef6:	d301      	bcc.n	8000efc <__clzsi2+0x18>
 8000ef8:	0a00      	lsrs	r0, r0, #8
 8000efa:	3908      	subs	r1, #8
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	4298      	cmp	r0, r3
 8000f00:	d301      	bcc.n	8000f06 <__clzsi2+0x22>
 8000f02:	0900      	lsrs	r0, r0, #4
 8000f04:	3904      	subs	r1, #4
 8000f06:	a202      	add	r2, pc, #8	; (adr r2, 8000f10 <__clzsi2+0x2c>)
 8000f08:	5c10      	ldrb	r0, [r2, r0]
 8000f0a:	1840      	adds	r0, r0, r1
 8000f0c:	4770      	bx	lr
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	02020304 	.word	0x02020304
 8000f14:	01010101 	.word	0x01010101
	...

08000f20 <__eqsf2>:
 8000f20:	b570      	push	{r4, r5, r6, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0245      	lsls	r5, r0, #9
 8000f26:	024e      	lsls	r6, r1, #9
 8000f28:	004c      	lsls	r4, r1, #1
 8000f2a:	0fc3      	lsrs	r3, r0, #31
 8000f2c:	0a6d      	lsrs	r5, r5, #9
 8000f2e:	2001      	movs	r0, #1
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	0a76      	lsrs	r6, r6, #9
 8000f34:	0e24      	lsrs	r4, r4, #24
 8000f36:	0fc9      	lsrs	r1, r1, #31
 8000f38:	2aff      	cmp	r2, #255	; 0xff
 8000f3a:	d006      	beq.n	8000f4a <__eqsf2+0x2a>
 8000f3c:	2cff      	cmp	r4, #255	; 0xff
 8000f3e:	d003      	beq.n	8000f48 <__eqsf2+0x28>
 8000f40:	42a2      	cmp	r2, r4
 8000f42:	d101      	bne.n	8000f48 <__eqsf2+0x28>
 8000f44:	42b5      	cmp	r5, r6
 8000f46:	d006      	beq.n	8000f56 <__eqsf2+0x36>
 8000f48:	bd70      	pop	{r4, r5, r6, pc}
 8000f4a:	2d00      	cmp	r5, #0
 8000f4c:	d1fc      	bne.n	8000f48 <__eqsf2+0x28>
 8000f4e:	2cff      	cmp	r4, #255	; 0xff
 8000f50:	d1fa      	bne.n	8000f48 <__eqsf2+0x28>
 8000f52:	2e00      	cmp	r6, #0
 8000f54:	d1f8      	bne.n	8000f48 <__eqsf2+0x28>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d006      	beq.n	8000f68 <__eqsf2+0x48>
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	2a00      	cmp	r2, #0
 8000f5e:	d1f3      	bne.n	8000f48 <__eqsf2+0x28>
 8000f60:	0028      	movs	r0, r5
 8000f62:	1e43      	subs	r3, r0, #1
 8000f64:	4198      	sbcs	r0, r3
 8000f66:	e7ef      	b.n	8000f48 <__eqsf2+0x28>
 8000f68:	2000      	movs	r0, #0
 8000f6a:	e7ed      	b.n	8000f48 <__eqsf2+0x28>

08000f6c <__gesf2>:
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	0042      	lsls	r2, r0, #1
 8000f70:	0245      	lsls	r5, r0, #9
 8000f72:	024e      	lsls	r6, r1, #9
 8000f74:	004c      	lsls	r4, r1, #1
 8000f76:	0fc3      	lsrs	r3, r0, #31
 8000f78:	0a6d      	lsrs	r5, r5, #9
 8000f7a:	0e12      	lsrs	r2, r2, #24
 8000f7c:	0a76      	lsrs	r6, r6, #9
 8000f7e:	0e24      	lsrs	r4, r4, #24
 8000f80:	0fc8      	lsrs	r0, r1, #31
 8000f82:	2aff      	cmp	r2, #255	; 0xff
 8000f84:	d01b      	beq.n	8000fbe <__gesf2+0x52>
 8000f86:	2cff      	cmp	r4, #255	; 0xff
 8000f88:	d00e      	beq.n	8000fa8 <__gesf2+0x3c>
 8000f8a:	2a00      	cmp	r2, #0
 8000f8c:	d11b      	bne.n	8000fc6 <__gesf2+0x5a>
 8000f8e:	2c00      	cmp	r4, #0
 8000f90:	d101      	bne.n	8000f96 <__gesf2+0x2a>
 8000f92:	2e00      	cmp	r6, #0
 8000f94:	d01c      	beq.n	8000fd0 <__gesf2+0x64>
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	d00c      	beq.n	8000fb4 <__gesf2+0x48>
 8000f9a:	4283      	cmp	r3, r0
 8000f9c:	d01c      	beq.n	8000fd8 <__gesf2+0x6c>
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	1e58      	subs	r0, r3, #1
 8000fa2:	4008      	ands	r0, r1
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	bd70      	pop	{r4, r5, r6, pc}
 8000fa8:	2e00      	cmp	r6, #0
 8000faa:	d122      	bne.n	8000ff2 <__gesf2+0x86>
 8000fac:	2a00      	cmp	r2, #0
 8000fae:	d1f4      	bne.n	8000f9a <__gesf2+0x2e>
 8000fb0:	2d00      	cmp	r5, #0
 8000fb2:	d1f2      	bne.n	8000f9a <__gesf2+0x2e>
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	d1f6      	bne.n	8000fa6 <__gesf2+0x3a>
 8000fb8:	2001      	movs	r0, #1
 8000fba:	4240      	negs	r0, r0
 8000fbc:	e7f3      	b.n	8000fa6 <__gesf2+0x3a>
 8000fbe:	2d00      	cmp	r5, #0
 8000fc0:	d117      	bne.n	8000ff2 <__gesf2+0x86>
 8000fc2:	2cff      	cmp	r4, #255	; 0xff
 8000fc4:	d0f0      	beq.n	8000fa8 <__gesf2+0x3c>
 8000fc6:	2c00      	cmp	r4, #0
 8000fc8:	d1e7      	bne.n	8000f9a <__gesf2+0x2e>
 8000fca:	2e00      	cmp	r6, #0
 8000fcc:	d1e5      	bne.n	8000f9a <__gesf2+0x2e>
 8000fce:	e7e6      	b.n	8000f9e <__gesf2+0x32>
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	2d00      	cmp	r5, #0
 8000fd4:	d0e7      	beq.n	8000fa6 <__gesf2+0x3a>
 8000fd6:	e7e2      	b.n	8000f9e <__gesf2+0x32>
 8000fd8:	42a2      	cmp	r2, r4
 8000fda:	dc05      	bgt.n	8000fe8 <__gesf2+0x7c>
 8000fdc:	dbea      	blt.n	8000fb4 <__gesf2+0x48>
 8000fde:	42b5      	cmp	r5, r6
 8000fe0:	d802      	bhi.n	8000fe8 <__gesf2+0x7c>
 8000fe2:	d3e7      	bcc.n	8000fb4 <__gesf2+0x48>
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	e7de      	b.n	8000fa6 <__gesf2+0x3a>
 8000fe8:	4243      	negs	r3, r0
 8000fea:	4158      	adcs	r0, r3
 8000fec:	0040      	lsls	r0, r0, #1
 8000fee:	3801      	subs	r0, #1
 8000ff0:	e7d9      	b.n	8000fa6 <__gesf2+0x3a>
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	4240      	negs	r0, r0
 8000ff6:	e7d6      	b.n	8000fa6 <__gesf2+0x3a>

08000ff8 <__lesf2>:
 8000ff8:	b570      	push	{r4, r5, r6, lr}
 8000ffa:	0042      	lsls	r2, r0, #1
 8000ffc:	0245      	lsls	r5, r0, #9
 8000ffe:	024e      	lsls	r6, r1, #9
 8001000:	004c      	lsls	r4, r1, #1
 8001002:	0fc3      	lsrs	r3, r0, #31
 8001004:	0a6d      	lsrs	r5, r5, #9
 8001006:	0e12      	lsrs	r2, r2, #24
 8001008:	0a76      	lsrs	r6, r6, #9
 800100a:	0e24      	lsrs	r4, r4, #24
 800100c:	0fc8      	lsrs	r0, r1, #31
 800100e:	2aff      	cmp	r2, #255	; 0xff
 8001010:	d00b      	beq.n	800102a <__lesf2+0x32>
 8001012:	2cff      	cmp	r4, #255	; 0xff
 8001014:	d00d      	beq.n	8001032 <__lesf2+0x3a>
 8001016:	2a00      	cmp	r2, #0
 8001018:	d11f      	bne.n	800105a <__lesf2+0x62>
 800101a:	2c00      	cmp	r4, #0
 800101c:	d116      	bne.n	800104c <__lesf2+0x54>
 800101e:	2e00      	cmp	r6, #0
 8001020:	d114      	bne.n	800104c <__lesf2+0x54>
 8001022:	2000      	movs	r0, #0
 8001024:	2d00      	cmp	r5, #0
 8001026:	d010      	beq.n	800104a <__lesf2+0x52>
 8001028:	e009      	b.n	800103e <__lesf2+0x46>
 800102a:	2d00      	cmp	r5, #0
 800102c:	d10c      	bne.n	8001048 <__lesf2+0x50>
 800102e:	2cff      	cmp	r4, #255	; 0xff
 8001030:	d113      	bne.n	800105a <__lesf2+0x62>
 8001032:	2e00      	cmp	r6, #0
 8001034:	d108      	bne.n	8001048 <__lesf2+0x50>
 8001036:	2a00      	cmp	r2, #0
 8001038:	d008      	beq.n	800104c <__lesf2+0x54>
 800103a:	4283      	cmp	r3, r0
 800103c:	d012      	beq.n	8001064 <__lesf2+0x6c>
 800103e:	2102      	movs	r1, #2
 8001040:	1e58      	subs	r0, r3, #1
 8001042:	4008      	ands	r0, r1
 8001044:	3801      	subs	r0, #1
 8001046:	e000      	b.n	800104a <__lesf2+0x52>
 8001048:	2002      	movs	r0, #2
 800104a:	bd70      	pop	{r4, r5, r6, pc}
 800104c:	2d00      	cmp	r5, #0
 800104e:	d1f4      	bne.n	800103a <__lesf2+0x42>
 8001050:	2800      	cmp	r0, #0
 8001052:	d1fa      	bne.n	800104a <__lesf2+0x52>
 8001054:	2001      	movs	r0, #1
 8001056:	4240      	negs	r0, r0
 8001058:	e7f7      	b.n	800104a <__lesf2+0x52>
 800105a:	2c00      	cmp	r4, #0
 800105c:	d1ed      	bne.n	800103a <__lesf2+0x42>
 800105e:	2e00      	cmp	r6, #0
 8001060:	d1eb      	bne.n	800103a <__lesf2+0x42>
 8001062:	e7ec      	b.n	800103e <__lesf2+0x46>
 8001064:	42a2      	cmp	r2, r4
 8001066:	dc05      	bgt.n	8001074 <__lesf2+0x7c>
 8001068:	dbf2      	blt.n	8001050 <__lesf2+0x58>
 800106a:	42b5      	cmp	r5, r6
 800106c:	d802      	bhi.n	8001074 <__lesf2+0x7c>
 800106e:	d3ef      	bcc.n	8001050 <__lesf2+0x58>
 8001070:	2000      	movs	r0, #0
 8001072:	e7ea      	b.n	800104a <__lesf2+0x52>
 8001074:	4243      	negs	r3, r0
 8001076:	4158      	adcs	r0, r3
 8001078:	0040      	lsls	r0, r0, #1
 800107a:	3801      	subs	r0, #1
 800107c:	e7e5      	b.n	800104a <__lesf2+0x52>
 800107e:	46c0      	nop			; (mov r8, r8)

08001080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	0002      	movs	r2, r0
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b7f      	cmp	r3, #127	; 0x7f
 8001092:	d809      	bhi.n	80010a8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001094:	1dfb      	adds	r3, r7, #7
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	001a      	movs	r2, r3
 800109a:	231f      	movs	r3, #31
 800109c:	401a      	ands	r2, r3
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_EnableIRQ+0x30>)
 80010a0:	2101      	movs	r1, #1
 80010a2:	4091      	lsls	r1, r2
 80010a4:	000a      	movs	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]
  }
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	0002      	movs	r2, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b7f      	cmp	r3, #127	; 0x7f
 80010c8:	d828      	bhi.n	800111c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ca:	4a2f      	ldr	r2, [pc, #188]	; (8001188 <__NVIC_SetPriority+0xd4>)
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	089b      	lsrs	r3, r3, #2
 80010d4:	33c0      	adds	r3, #192	; 0xc0
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	589b      	ldr	r3, [r3, r2]
 80010da:	1dfa      	adds	r2, r7, #7
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	0011      	movs	r1, r2
 80010e0:	2203      	movs	r2, #3
 80010e2:	400a      	ands	r2, r1
 80010e4:	00d2      	lsls	r2, r2, #3
 80010e6:	21ff      	movs	r1, #255	; 0xff
 80010e8:	4091      	lsls	r1, r2
 80010ea:	000a      	movs	r2, r1
 80010ec:	43d2      	mvns	r2, r2
 80010ee:	401a      	ands	r2, r3
 80010f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	019b      	lsls	r3, r3, #6
 80010f6:	22ff      	movs	r2, #255	; 0xff
 80010f8:	401a      	ands	r2, r3
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	0018      	movs	r0, r3
 8001100:	2303      	movs	r3, #3
 8001102:	4003      	ands	r3, r0
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001108:	481f      	ldr	r0, [pc, #124]	; (8001188 <__NVIC_SetPriority+0xd4>)
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b25b      	sxtb	r3, r3
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	430a      	orrs	r2, r1
 8001114:	33c0      	adds	r3, #192	; 0xc0
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800111a:	e031      	b.n	8001180 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800111c:	4a1b      	ldr	r2, [pc, #108]	; (800118c <__NVIC_SetPriority+0xd8>)
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	0019      	movs	r1, r3
 8001124:	230f      	movs	r3, #15
 8001126:	400b      	ands	r3, r1
 8001128:	3b08      	subs	r3, #8
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	3306      	adds	r3, #6
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	18d3      	adds	r3, r2, r3
 8001132:	3304      	adds	r3, #4
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	1dfa      	adds	r2, r7, #7
 8001138:	7812      	ldrb	r2, [r2, #0]
 800113a:	0011      	movs	r1, r2
 800113c:	2203      	movs	r2, #3
 800113e:	400a      	ands	r2, r1
 8001140:	00d2      	lsls	r2, r2, #3
 8001142:	21ff      	movs	r1, #255	; 0xff
 8001144:	4091      	lsls	r1, r2
 8001146:	000a      	movs	r2, r1
 8001148:	43d2      	mvns	r2, r2
 800114a:	401a      	ands	r2, r3
 800114c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	019b      	lsls	r3, r3, #6
 8001152:	22ff      	movs	r2, #255	; 0xff
 8001154:	401a      	ands	r2, r3
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	0018      	movs	r0, r3
 800115c:	2303      	movs	r3, #3
 800115e:	4003      	ands	r3, r0
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001164:	4809      	ldr	r0, [pc, #36]	; (800118c <__NVIC_SetPriority+0xd8>)
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	001c      	movs	r4, r3
 800116c:	230f      	movs	r3, #15
 800116e:	4023      	ands	r3, r4
 8001170:	3b08      	subs	r3, #8
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	430a      	orrs	r2, r1
 8001176:	3306      	adds	r3, #6
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	18c3      	adds	r3, r0, r3
 800117c:	3304      	adds	r3, #4
 800117e:	601a      	str	r2, [r3, #0]
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b003      	add	sp, #12
 8001186:	bd90      	pop	{r4, r7, pc}
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <LL_AHB1_GRP1_EnableClock+0x28>)
 800119a:	6959      	ldr	r1, [r3, #20]
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <LL_AHB1_GRP1_EnableClock+0x28>)
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4013      	ands	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b004      	add	sp, #16
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40021000 	.word	0x40021000

080011bc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 80011c6:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <LL_SYSCFG_SetEXTISource+0x48>)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	21ff      	movs	r1, #255	; 0xff
 80011cc:	400b      	ands	r3, r1
 80011ce:	3302      	adds	r3, #2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	589b      	ldr	r3, [r3, r2]
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	0c12      	lsrs	r2, r2, #16
 80011d8:	210f      	movs	r1, #15
 80011da:	4091      	lsls	r1, r2
 80011dc:	000a      	movs	r2, r1
 80011de:	43d2      	mvns	r2, r2
 80011e0:	401a      	ands	r2, r3
 80011e2:	0011      	movs	r1, r2
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	0c1b      	lsrs	r3, r3, #16
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	409a      	lsls	r2, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <LL_SYSCFG_SetEXTISource+0x48>)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	24ff      	movs	r4, #255	; 0xff
 80011f2:	4023      	ands	r3, r4
 80011f4:	430a      	orrs	r2, r1
 80011f6:	3302      	adds	r3, #2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	501a      	str	r2, [r3, r0]
}
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b003      	add	sp, #12
 8001202:	bd90      	pop	{r4, r7, pc}
 8001204:	40010000 	.word	0x40010000

08001208 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	435b      	muls	r3, r3
 800121c:	001a      	movs	r2, r3
 800121e:	0013      	movs	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	189b      	adds	r3, r3, r2
 8001224:	43db      	mvns	r3, r3
 8001226:	400b      	ands	r3, r1
 8001228:	001a      	movs	r2, r3
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	435b      	muls	r3, r3
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	434b      	muls	r3, r1
 8001232:	431a      	orrs	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b004      	add	sp, #16
 800123e:	bd80      	pop	{r7, pc}

08001240 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	68d9      	ldr	r1, [r3, #12]
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	435b      	muls	r3, r3
 8001254:	001a      	movs	r2, r3
 8001256:	0013      	movs	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	189b      	adds	r3, r3, r2
 800125c:	43db      	mvns	r3, r3
 800125e:	400b      	ands	r3, r1
 8001260:	001a      	movs	r2, r3
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	435b      	muls	r3, r3
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	434b      	muls	r3, r1
 800126a:	431a      	orrs	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	60da      	str	r2, [r3, #12]
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b004      	add	sp, #16
 8001276:	bd80      	pop	{r7, pc}

08001278 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b002      	add	sp, #8
 800128e:	bd80      	pop	{r7, pc}

08001290 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001296:	2418      	movs	r4, #24
 8001298:	193b      	adds	r3, r7, r4
 800129a:	0018      	movs	r0, r3
 800129c:	2308      	movs	r3, #8
 800129e:	001a      	movs	r2, r3
 80012a0:	2100      	movs	r1, #0
 80012a2:	f002 fa49 	bl	8003738 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	003b      	movs	r3, r7
 80012a8:	0018      	movs	r0, r3
 80012aa:	2318      	movs	r3, #24
 80012ac:	001a      	movs	r2, r3
 80012ae:	2100      	movs	r1, #0
 80012b0:	f002 fa42 	bl	8003738 <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	03db      	lsls	r3, r3, #15
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7ff ff69 	bl	8001190 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	029b      	lsls	r3, r3, #10
 80012c2:	0018      	movs	r0, r3
 80012c4:	f7ff ff64 	bl	8001190 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	02db      	lsls	r3, r3, #11
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7ff ff5f 	bl	8001190 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 80012d2:	4b70      	ldr	r3, [pc, #448]	; (8001494 <MX_GPIO_Init+0x204>)
 80012d4:	2101      	movs	r1, #1
 80012d6:	0018      	movs	r0, r3
 80012d8:	f7ff ffce 	bl	8001278 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 80012dc:	4b6d      	ldr	r3, [pc, #436]	; (8001494 <MX_GPIO_Init+0x204>)
 80012de:	2102      	movs	r1, #2
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff ffc9 	bl	8001278 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(B2_GPIO_Port, B2_Pin);
 80012e6:	2390      	movs	r3, #144	; 0x90
 80012e8:	05db      	lsls	r3, r3, #23
 80012ea:	2101      	movs	r1, #1
 80012ec:	0018      	movs	r0, r3
 80012ee:	f7ff ffc3 	bl	8001278 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TX_1W_GPIO_Port, TX_1W_Pin);
 80012f2:	2390      	movs	r3, #144	; 0x90
 80012f4:	05db      	lsls	r3, r3, #23
 80012f6:	2104      	movs	r1, #4
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff ffbd 	bl	8001278 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CTR_GPIO_Port, CTR_Pin);
 80012fe:	2390      	movs	r3, #144	; 0x90
 8001300:	05db      	lsls	r3, r3, #23
 8001302:	2140      	movs	r1, #64	; 0x40
 8001304:	0018      	movs	r0, r3
 8001306:	f7ff ffb7 	bl	8001278 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(B1_GPIO_Port, B1_Pin);
 800130a:	4b63      	ldr	r3, [pc, #396]	; (8001498 <MX_GPIO_Init+0x208>)
 800130c:	2102      	movs	r1, #2
 800130e:	0018      	movs	r0, r3
 8001310:	f7ff ffb2 	bl	8001278 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 8001314:	003b      	movs	r3, r7
 8001316:	2201      	movs	r2, #1
 8001318:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800131a:	003b      	movs	r3, r7
 800131c:	2201      	movs	r2, #1
 800131e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001320:	003b      	movs	r3, r7
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001326:	003b      	movs	r3, r7
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800132c:	003b      	movs	r3, r7
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001332:	003b      	movs	r3, r7
 8001334:	4a57      	ldr	r2, [pc, #348]	; (8001494 <MX_GPIO_Init+0x204>)
 8001336:	0019      	movs	r1, r3
 8001338:	0010      	movs	r0, r2
 800133a:	f002 f993 	bl	8003664 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 800133e:	003b      	movs	r3, r7
 8001340:	2202      	movs	r2, #2
 8001342:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001344:	003b      	movs	r3, r7
 8001346:	2201      	movs	r2, #1
 8001348:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800134a:	003b      	movs	r3, r7
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001350:	003b      	movs	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001356:	003b      	movs	r3, r7
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800135c:	003b      	movs	r3, r7
 800135e:	4a4d      	ldr	r2, [pc, #308]	; (8001494 <MX_GPIO_Init+0x204>)
 8001360:	0019      	movs	r1, r3
 8001362:	0010      	movs	r0, r2
 8001364:	f002 f97e 	bl	8003664 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B2_Pin;
 8001368:	003b      	movs	r3, r7
 800136a:	2201      	movs	r2, #1
 800136c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800136e:	003b      	movs	r3, r7
 8001370:	2201      	movs	r2, #1
 8001372:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001374:	003b      	movs	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800137a:	003b      	movs	r3, r7
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001380:	003b      	movs	r3, r7
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001386:	003a      	movs	r2, r7
 8001388:	2390      	movs	r3, #144	; 0x90
 800138a:	05db      	lsls	r3, r3, #23
 800138c:	0011      	movs	r1, r2
 800138e:	0018      	movs	r0, r3
 8001390:	f002 f968 	bl	8003664 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TX_1W_Pin;
 8001394:	003b      	movs	r3, r7
 8001396:	2204      	movs	r2, #4
 8001398:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800139a:	003b      	movs	r3, r7
 800139c:	2201      	movs	r2, #1
 800139e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013a0:	003b      	movs	r3, r7
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013a6:	003b      	movs	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013ac:	003b      	movs	r3, r7
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TX_1W_GPIO_Port, &GPIO_InitStruct);
 80013b2:	003a      	movs	r2, r7
 80013b4:	2390      	movs	r3, #144	; 0x90
 80013b6:	05db      	lsls	r3, r3, #23
 80013b8:	0011      	movs	r1, r2
 80013ba:	0018      	movs	r0, r3
 80013bc:	f002 f952 	bl	8003664 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RX_1W_Pin;
 80013c0:	003b      	movs	r3, r7
 80013c2:	2208      	movs	r2, #8
 80013c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80013c6:	003b      	movs	r3, r7
 80013c8:	2200      	movs	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80013cc:	003b      	movs	r3, r7
 80013ce:	2201      	movs	r2, #1
 80013d0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(RX_1W_GPIO_Port, &GPIO_InitStruct);
 80013d2:	003a      	movs	r2, r7
 80013d4:	2390      	movs	r3, #144	; 0x90
 80013d6:	05db      	lsls	r3, r3, #23
 80013d8:	0011      	movs	r1, r2
 80013da:	0018      	movs	r0, r3
 80013dc:	f002 f942 	bl	8003664 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CTR_Pin;
 80013e0:	003b      	movs	r3, r7
 80013e2:	2240      	movs	r2, #64	; 0x40
 80013e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013e6:	003b      	movs	r3, r7
 80013e8:	2201      	movs	r2, #1
 80013ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013ec:	003b      	movs	r3, r7
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013f2:	003b      	movs	r3, r7
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013f8:	003b      	movs	r3, r7
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(CTR_GPIO_Port, &GPIO_InitStruct);
 80013fe:	003a      	movs	r2, r7
 8001400:	2390      	movs	r3, #144	; 0x90
 8001402:	05db      	lsls	r3, r3, #23
 8001404:	0011      	movs	r1, r2
 8001406:	0018      	movs	r0, r3
 8001408:	f002 f92c 	bl	8003664 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B1_Pin;
 800140c:	003b      	movs	r3, r7
 800140e:	2202      	movs	r2, #2
 8001410:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001412:	003b      	movs	r3, r7
 8001414:	2201      	movs	r2, #1
 8001416:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001418:	003b      	movs	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800141e:	003b      	movs	r3, r7
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001424:	003b      	movs	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800142a:	003b      	movs	r3, r7
 800142c:	4a1a      	ldr	r2, [pc, #104]	; (8001498 <MX_GPIO_Init+0x208>)
 800142e:	0019      	movs	r1, r3
 8001430:	0010      	movs	r0, r2
 8001432:	f002 f917 	bl	8003664 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE7);
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <MX_GPIO_Init+0x20c>)
 8001438:	0019      	movs	r1, r3
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff febe 	bl	80011bc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(ZC_INT_GPIO_Port, ZC_INT_Pin, LL_GPIO_PULL_NO);
 8001440:	2390      	movs	r3, #144	; 0x90
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	2200      	movs	r2, #0
 8001446:	2180      	movs	r1, #128	; 0x80
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff fef9 	bl	8001240 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(ZC_INT_GPIO_Port, ZC_INT_Pin, LL_GPIO_MODE_INPUT);
 800144e:	2390      	movs	r3, #144	; 0x90
 8001450:	05db      	lsls	r3, r3, #23
 8001452:	2200      	movs	r2, #0
 8001454:	2180      	movs	r1, #128	; 0x80
 8001456:	0018      	movs	r0, r3
 8001458:	f7ff fed6 	bl	8001208 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 800145c:	0021      	movs	r1, r4
 800145e:	187b      	adds	r3, r7, r1
 8001460:	2280      	movs	r2, #128	; 0x80
 8001462:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001464:	187b      	adds	r3, r7, r1
 8001466:	2201      	movs	r2, #1
 8001468:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2200      	movs	r2, #0
 800146e:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2201      	movs	r2, #1
 8001474:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001476:	187b      	adds	r3, r7, r1
 8001478:	0018      	movs	r0, r3
 800147a:	f001 ffb3 	bl	80033e4 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
 800147e:	2100      	movs	r1, #0
 8001480:	2007      	movs	r0, #7
 8001482:	f7ff fe17 	bl	80010b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001486:	2007      	movs	r0, #7
 8001488:	f7ff fdfa 	bl	8001080 <__NVIC_EnableIRQ>

}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b009      	add	sp, #36	; 0x24
 8001492:	bd90      	pop	{r4, r7, pc}
 8001494:	48001400 	.word	0x48001400
 8001498:	48000400 	.word	0x48000400
 800149c:	000c0001 	.word	0x000c0001

080014a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <LL_RCC_HSI_Enable+0x18>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <LL_RCC_HSI_Enable+0x18>)
 80014aa:	2101      	movs	r1, #1
 80014ac:	430a      	orrs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	40021000 	.word	0x40021000

080014bc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <LL_RCC_HSI_IsReady+0x1c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2202      	movs	r2, #2
 80014c6:	4013      	ands	r3, r2
 80014c8:	3b02      	subs	r3, #2
 80014ca:	425a      	negs	r2, r3
 80014cc:	4153      	adcs	r3, r2
 80014ce:	b2db      	uxtb	r3, r3
}
 80014d0:	0018      	movs	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	40021000 	.word	0x40021000

080014dc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	22f8      	movs	r2, #248	; 0xf8
 80014ea:	4393      	bics	r3, r2
 80014ec:	0019      	movs	r1, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	00da      	lsls	r2, r3, #3
 80014f2:	4b03      	ldr	r3, [pc, #12]	; (8001500 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]
}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b002      	add	sp, #8
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40021000 	.word	0x40021000

08001504 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <LL_RCC_SetSysClkSource+0x24>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2203      	movs	r2, #3
 8001512:	4393      	bics	r3, r2
 8001514:	0019      	movs	r1, r3
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <LL_RCC_SetSysClkSource+0x24>)
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	430a      	orrs	r2, r1
 800151c:	605a      	str	r2, [r3, #4]
}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	b002      	add	sp, #8
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	40021000 	.word	0x40021000

0800152c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <LL_RCC_GetSysClkSource+0x14>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	220c      	movs	r2, #12
 8001536:	4013      	ands	r3, r2
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	40021000 	.word	0x40021000

08001544 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <LL_RCC_SetAHBPrescaler+0x24>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	22f0      	movs	r2, #240	; 0xf0
 8001552:	4393      	bics	r3, r2
 8001554:	0019      	movs	r1, r3
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <LL_RCC_SetAHBPrescaler+0x24>)
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	430a      	orrs	r2, r1
 800155c:	605a      	str	r2, [r3, #4]
}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	46bd      	mov	sp, r7
 8001562:	b002      	add	sp, #8
 8001564:	bd80      	pop	{r7, pc}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	40021000 	.word	0x40021000

0800156c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	4a06      	ldr	r2, [pc, #24]	; (8001594 <LL_RCC_SetAPB1Prescaler+0x28>)
 800157a:	4013      	ands	r3, r2
 800157c:	0019      	movs	r1, r3
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	430a      	orrs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]
}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	46bd      	mov	sp, r7
 800158a:	b002      	add	sp, #8
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	40021000 	.word	0x40021000
 8001594:	fffff8ff 	.word	0xfffff8ff

08001598 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <LL_RCC_SetUSARTClockSource+0x30>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	0e12      	lsrs	r2, r2, #24
 80015a8:	2103      	movs	r1, #3
 80015aa:	4091      	lsls	r1, r2
 80015ac:	000a      	movs	r2, r1
 80015ae:	43d2      	mvns	r2, r2
 80015b0:	401a      	ands	r2, r3
 80015b2:	0011      	movs	r1, r2
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	0a1a      	lsrs	r2, r3, #8
 80015ba:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <LL_RCC_SetUSARTClockSource+0x30>)
 80015bc:	430a      	orrs	r2, r1
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80015c0:	46c0      	nop			; (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b002      	add	sp, #8
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40021000 	.word	0x40021000

080015cc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <LL_RCC_PLL_Enable+0x18>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <LL_RCC_PLL_Enable+0x18>)
 80015d6:	2180      	movs	r1, #128	; 0x80
 80015d8:	0449      	lsls	r1, r1, #17
 80015da:	430a      	orrs	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]
}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40021000 	.word	0x40021000

080015e8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <LL_RCC_PLL_IsReady+0x24>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	049b      	lsls	r3, r3, #18
 80015f4:	4013      	ands	r3, r2
 80015f6:	22fe      	movs	r2, #254	; 0xfe
 80015f8:	0612      	lsls	r2, r2, #24
 80015fa:	4694      	mov	ip, r2
 80015fc:	4463      	add	r3, ip
 80015fe:	425a      	negs	r2, r3
 8001600:	4153      	adcs	r3, r2
 8001602:	b2db      	uxtb	r3, r3
}
 8001604:	0018      	movs	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	40021000 	.word	0x40021000

08001610 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001620:	4013      	ands	r3, r2
 8001622:	0019      	movs	r1, r3
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	025b      	lsls	r3, r3, #9
 800162a:	401a      	ands	r2, r3
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	431a      	orrs	r2, r3
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001632:	430a      	orrs	r2, r1
 8001634:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	220f      	movs	r2, #15
 800163c:	4393      	bics	r3, r2
 800163e:	0019      	movs	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	220f      	movs	r2, #15
 8001644:	401a      	ands	r2, r3
 8001646:	4b03      	ldr	r3, [pc, #12]	; (8001654 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001648:	430a      	orrs	r2, r1
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800164c:	46c0      	nop			; (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b002      	add	sp, #8
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021000 	.word	0x40021000
 8001658:	ffc2ffff 	.word	0xffc2ffff

0800165c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <LL_FLASH_SetLatency+0x24>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2201      	movs	r2, #1
 800166a:	4393      	bics	r3, r2
 800166c:	0019      	movs	r1, r3
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <LL_FLASH_SetLatency+0x24>)
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	430a      	orrs	r2, r1
 8001674:	601a      	str	r2, [r3, #0]
}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	b002      	add	sp, #8
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	40022000 	.word	0x40022000

08001684 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <LL_FLASH_GetLatency+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2201      	movs	r2, #1
 800168e:	4013      	ands	r3, r2
}
 8001690:	0018      	movs	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	40022000 	.word	0x40022000

0800169c <Set_Pin_Output>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b089      	sub	sp, #36	; 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	000a      	movs	r2, r1
 80016a6:	1cbb      	adds	r3, r7, #2
 80016a8:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	240c      	movs	r4, #12
 80016ac:	193b      	adds	r3, r7, r4
 80016ae:	0018      	movs	r0, r3
 80016b0:	2314      	movs	r3, #20
 80016b2:	001a      	movs	r2, r3
 80016b4:	2100      	movs	r1, #0
 80016b6:	f002 f83f 	bl	8003738 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 80016ba:	1cbb      	adds	r3, r7, #2
 80016bc:	881a      	ldrh	r2, [r3, #0]
 80016be:	193b      	adds	r3, r7, r4
 80016c0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	193b      	adds	r3, r7, r4
 80016c4:	2201      	movs	r2, #1
 80016c6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	193b      	adds	r3, r7, r4
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80016ce:	193a      	adds	r2, r7, r4
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	0011      	movs	r1, r2
 80016d4:	0018      	movs	r0, r3
 80016d6:	f000 fdc9 	bl	800226c <HAL_GPIO_Init>
}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	b009      	add	sp, #36	; 0x24
 80016e0:	bd90      	pop	{r4, r7, pc}

080016e2 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016e2:	b590      	push	{r4, r7, lr}
 80016e4:	b089      	sub	sp, #36	; 0x24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	000a      	movs	r2, r1
 80016ec:	1cbb      	adds	r3, r7, #2
 80016ee:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	240c      	movs	r4, #12
 80016f2:	193b      	adds	r3, r7, r4
 80016f4:	0018      	movs	r0, r3
 80016f6:	2314      	movs	r3, #20
 80016f8:	001a      	movs	r2, r3
 80016fa:	2100      	movs	r1, #0
 80016fc:	f002 f81c 	bl	8003738 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001700:	1cbb      	adds	r3, r7, #2
 8001702:	881a      	ldrh	r2, [r3, #0]
 8001704:	193b      	adds	r3, r7, r4
 8001706:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001708:	193b      	adds	r3, r7, r4
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800170e:	193b      	adds	r3, r7, r4
 8001710:	2201      	movs	r2, #1
 8001712:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001714:	193a      	adds	r2, r7, r4
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	0011      	movs	r1, r2
 800171a:	0018      	movs	r0, r3
 800171c:	f000 fda6 	bl	800226c <HAL_GPIO_Init>
}
 8001720:	46c0      	nop			; (mov r8, r8)
 8001722:	46bd      	mov	sp, r7
 8001724:	b009      	add	sp, #36	; 0x24
 8001726:	bd90      	pop	{r4, r7, pc}

08001728 <delay>:

void delay(uint16_t time) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	0002      	movs	r2, r0
 8001730:	1dbb      	adds	r3, r7, #6
 8001732:	801a      	strh	r2, [r3, #0]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim16, 0);
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <delay+0x30>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim16)) < time)
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <delay+0x30>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001744:	1dbb      	adds	r3, r7, #6
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d3f8      	bcc.n	800173e <delay+0x16>
		;
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	b002      	add	sp, #8
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	20000054 	.word	0x20000054

0800175c <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001762:	1dfb      	adds	r3, r7, #7
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(TX_1W_GPIO_Port, TX_1W_Pin);   // set the pin as output
 8001768:	2390      	movs	r3, #144	; 0x90
 800176a:	05db      	lsls	r3, r3, #23
 800176c:	2104      	movs	r1, #4
 800176e:	0018      	movs	r0, r3
 8001770:	f7ff ff94 	bl	800169c <Set_Pin_Output>
	HAL_GPIO_WritePin (TX_1W_GPIO_Port, TX_1W_Pin, 0);  // pull the pin low
 8001774:	2390      	movs	r3, #144	; 0x90
 8001776:	05db      	lsls	r3, r3, #23
 8001778:	2200      	movs	r2, #0
 800177a:	2104      	movs	r1, #4
 800177c:	0018      	movs	r0, r3
 800177e:	f000 ff02 	bl	8002586 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8001782:	23f0      	movs	r3, #240	; 0xf0
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	0018      	movs	r0, r3
 8001788:	f7ff ffce 	bl	8001728 <delay>

	Set_Pin_Input(TX_1W_GPIO_Port, TX_1W_Pin);    // set the pin as input
 800178c:	2390      	movs	r3, #144	; 0x90
 800178e:	05db      	lsls	r3, r3, #23
 8001790:	2104      	movs	r1, #4
 8001792:	0018      	movs	r0, r3
 8001794:	f7ff ffa5 	bl	80016e2 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8001798:	2050      	movs	r0, #80	; 0x50
 800179a:	f7ff ffc5 	bl	8001728 <delay>

	if (!(HAL_GPIO_ReadPin (TX_1W_GPIO_Port, TX_1W_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 800179e:	2390      	movs	r3, #144	; 0x90
 80017a0:	05db      	lsls	r3, r3, #23
 80017a2:	2104      	movs	r1, #4
 80017a4:	0018      	movs	r0, r3
 80017a6:	f000 fed1 	bl	800254c <HAL_GPIO_ReadPin>
 80017aa:	1e03      	subs	r3, r0, #0
 80017ac:	d103      	bne.n	80017b6 <DS18B20_Start+0x5a>
 80017ae:	1dfb      	adds	r3, r7, #7
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e002      	b.n	80017bc <DS18B20_Start+0x60>
	else Response = -1;
 80017b6:	1dfb      	adds	r3, r7, #7
 80017b8:	22ff      	movs	r2, #255	; 0xff
 80017ba:	701a      	strb	r2, [r3, #0]

	delay (400); // 480 us delay totally.
 80017bc:	23c8      	movs	r3, #200	; 0xc8
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7ff ffb1 	bl	8001728 <delay>

	return Response;
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	781b      	ldrb	r3, [r3, #0]
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b002      	add	sp, #8
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	0002      	movs	r2, r0
 80017da:	1dfb      	adds	r3, r7, #7
 80017dc:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(TX_1W_GPIO_Port, TX_1W_Pin);  // set as output
 80017de:	2390      	movs	r3, #144	; 0x90
 80017e0:	05db      	lsls	r3, r3, #23
 80017e2:	2104      	movs	r1, #4
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff ff59 	bl	800169c <Set_Pin_Output>

	for (int i=0; i<8; i++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	e03a      	b.n	8001866 <DS18B20_Write+0x94>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80017f0:	1dfb      	adds	r3, r7, #7
 80017f2:	781a      	ldrb	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	411a      	asrs	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	2201      	movs	r2, #1
 80017fc:	4013      	ands	r3, r2
 80017fe:	d019      	beq.n	8001834 <DS18B20_Write+0x62>
		{
			// write 1

			Set_Pin_Output(TX_1W_GPIO_Port, TX_1W_Pin);  // set as output
 8001800:	2390      	movs	r3, #144	; 0x90
 8001802:	05db      	lsls	r3, r3, #23
 8001804:	2104      	movs	r1, #4
 8001806:	0018      	movs	r0, r3
 8001808:	f7ff ff48 	bl	800169c <Set_Pin_Output>
			HAL_GPIO_WritePin (TX_1W_GPIO_Port, TX_1W_Pin, 0);  // pull the pin LOW
 800180c:	2390      	movs	r3, #144	; 0x90
 800180e:	05db      	lsls	r3, r3, #23
 8001810:	2200      	movs	r2, #0
 8001812:	2104      	movs	r1, #4
 8001814:	0018      	movs	r0, r3
 8001816:	f000 feb6 	bl	8002586 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 800181a:	2001      	movs	r0, #1
 800181c:	f7ff ff84 	bl	8001728 <delay>

			Set_Pin_Input(TX_1W_GPIO_Port, TX_1W_Pin);  // set as input
 8001820:	2390      	movs	r3, #144	; 0x90
 8001822:	05db      	lsls	r3, r3, #23
 8001824:	2104      	movs	r1, #4
 8001826:	0018      	movs	r0, r3
 8001828:	f7ff ff5b 	bl	80016e2 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 800182c:	2032      	movs	r0, #50	; 0x32
 800182e:	f7ff ff7b 	bl	8001728 <delay>
 8001832:	e015      	b.n	8001860 <DS18B20_Write+0x8e>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(TX_1W_GPIO_Port, TX_1W_Pin);
 8001834:	2390      	movs	r3, #144	; 0x90
 8001836:	05db      	lsls	r3, r3, #23
 8001838:	2104      	movs	r1, #4
 800183a:	0018      	movs	r0, r3
 800183c:	f7ff ff2e 	bl	800169c <Set_Pin_Output>
			HAL_GPIO_WritePin (TX_1W_GPIO_Port, TX_1W_Pin, 0);  // pull the pin LOW
 8001840:	2390      	movs	r3, #144	; 0x90
 8001842:	05db      	lsls	r3, r3, #23
 8001844:	2200      	movs	r2, #0
 8001846:	2104      	movs	r1, #4
 8001848:	0018      	movs	r0, r3
 800184a:	f000 fe9c 	bl	8002586 <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 800184e:	2032      	movs	r0, #50	; 0x32
 8001850:	f7ff ff6a 	bl	8001728 <delay>

			Set_Pin_Input(TX_1W_GPIO_Port, TX_1W_Pin);
 8001854:	2390      	movs	r3, #144	; 0x90
 8001856:	05db      	lsls	r3, r3, #23
 8001858:	2104      	movs	r1, #4
 800185a:	0018      	movs	r0, r3
 800185c:	f7ff ff41 	bl	80016e2 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3301      	adds	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b07      	cmp	r3, #7
 800186a:	ddc1      	ble.n	80017f0 <DS18B20_Write+0x1e>
		}
	}
}
 800186c:	46c0      	nop			; (mov r8, r8)
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	b004      	add	sp, #16
 8001874:	bd80      	pop	{r7, pc}

08001876 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800187c:	1dfb      	adds	r3, r7, #7
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]

	Set_Pin_Input(TX_1W_GPIO_Port, TX_1W_Pin);
 8001882:	2390      	movs	r3, #144	; 0x90
 8001884:	05db      	lsls	r3, r3, #23
 8001886:	2104      	movs	r1, #4
 8001888:	0018      	movs	r0, r3
 800188a:	f7ff ff2a 	bl	80016e2 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 800188e:	2300      	movs	r3, #0
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	e032      	b.n	80018fa <DS18B20_Read+0x84>
	{
		Set_Pin_Output(TX_1W_GPIO_Port, TX_1W_Pin);   // set as output
 8001894:	2390      	movs	r3, #144	; 0x90
 8001896:	05db      	lsls	r3, r3, #23
 8001898:	2104      	movs	r1, #4
 800189a:	0018      	movs	r0, r3
 800189c:	f7ff fefe 	bl	800169c <Set_Pin_Output>

		HAL_GPIO_WritePin (TX_1W_GPIO_Port, TX_1W_Pin, 0);  // pull the data pin LOW
 80018a0:	2390      	movs	r3, #144	; 0x90
 80018a2:	05db      	lsls	r3, r3, #23
 80018a4:	2200      	movs	r2, #0
 80018a6:	2104      	movs	r1, #4
 80018a8:	0018      	movs	r0, r3
 80018aa:	f000 fe6c 	bl	8002586 <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7ff ff3a 	bl	8001728 <delay>

		Set_Pin_Input(TX_1W_GPIO_Port, TX_1W_Pin);  // set as input
 80018b4:	2390      	movs	r3, #144	; 0x90
 80018b6:	05db      	lsls	r3, r3, #23
 80018b8:	2104      	movs	r1, #4
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7ff ff11 	bl	80016e2 <Set_Pin_Input>
		delay (15);
 80018c0:	200f      	movs	r0, #15
 80018c2:	f7ff ff31 	bl	8001728 <delay>
		if (HAL_GPIO_ReadPin (TX_1W_GPIO_Port, TX_1W_Pin))  // if the pin is HIGH
 80018c6:	2390      	movs	r3, #144	; 0x90
 80018c8:	05db      	lsls	r3, r3, #23
 80018ca:	2104      	movs	r1, #4
 80018cc:	0018      	movs	r0, r3
 80018ce:	f000 fe3d 	bl	800254c <HAL_GPIO_ReadPin>
 80018d2:	1e03      	subs	r3, r0, #0
 80018d4:	d00b      	beq.n	80018ee <DS18B20_Read+0x78>
		{
			value |= 1<<i;  // read = 1
 80018d6:	2201      	movs	r2, #1
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	409a      	lsls	r2, r3
 80018dc:	0013      	movs	r3, r2
 80018de:	b25a      	sxtb	r2, r3
 80018e0:	1dfb      	adds	r3, r7, #7
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	4313      	orrs	r3, r2
 80018e8:	b25a      	sxtb	r2, r3
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	701a      	strb	r2, [r3, #0]
		}
		delay (50);  // wait for 60 us
 80018ee:	2032      	movs	r0, #50	; 0x32
 80018f0:	f7ff ff1a 	bl	8001728 <delay>
	for (int i=0;i<8;i++)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2b07      	cmp	r3, #7
 80018fe:	ddc9      	ble.n	8001894 <DS18B20_Read+0x1e>
	}
	return value;
 8001900:	1dfb      	adds	r3, r7, #7
 8001902:	781b      	ldrb	r3, [r3, #0]
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b002      	add	sp, #8
 800190a:	bd80      	pop	{r7, pc}

0800190c <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff f89f 	bl	8000a60 <__aeabi_fsub>
 8001922:	1c03      	adds	r3, r0, #0
 8001924:	1c1c      	adds	r4, r3, #0
 8001926:	6839      	ldr	r1, [r7, #0]
 8001928:	6a38      	ldr	r0, [r7, #32]
 800192a:	f7ff f899 	bl	8000a60 <__aeabi_fsub>
 800192e:	1c03      	adds	r3, r0, #0
 8001930:	1c19      	adds	r1, r3, #0
 8001932:	1c20      	adds	r0, r4, #0
 8001934:	f7fe ff46 	bl	80007c4 <__aeabi_fmul>
 8001938:	1c03      	adds	r3, r0, #0
 800193a:	1c1c      	adds	r4, r3, #0
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff f88e 	bl	8000a60 <__aeabi_fsub>
 8001944:	1c03      	adds	r3, r0, #0
 8001946:	1c19      	adds	r1, r3, #0
 8001948:	1c20      	adds	r0, r4, #0
 800194a:	f7fe fe21 	bl	8000590 <__aeabi_fdiv>
 800194e:	1c03      	adds	r3, r0, #0
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	1c18      	adds	r0, r3, #0
 8001954:	f7fe fc7c 	bl	8000250 <__aeabi_fadd>
 8001958:	1c03      	adds	r3, r0, #0
}
 800195a:	1c18      	adds	r0, r3, #0
 800195c:	46bd      	mov	sp, r7
 800195e:	b005      	add	sp, #20
 8001960:	bd90      	pop	{r4, r7, pc}
	...

08001964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001964:	b5b0      	push	{r4, r5, r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800196a:	f000 fb3d 	bl	8001fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800196e:	f000 f919 	bl	8001ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001972:	f7ff fc8d 	bl	8001290 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001976:	f000 fa8f 	bl	8001e98 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 800197a:	f000 f9ff 	bl	8001d7c <MX_TIM16_Init>
  MX_TIM17_Init();
 800197e:	f000 fa25 	bl	8001dcc <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
	oldTime = HAL_GetTick();
 8001982:	f000 fb8b 	bl	800209c <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	4b75      	ldr	r3, [pc, #468]	; (8001b60 <main+0x1fc>)
 800198a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(CTR_GPIO_Port, CTR_Pin, GPIO_PIN_RESET);
 800198c:	2390      	movs	r3, #144	; 0x90
 800198e:	05db      	lsls	r3, r3, #23
 8001990:	2200      	movs	r2, #0
 8001992:	2140      	movs	r1, #64	; 0x40
 8001994:	0018      	movs	r0, r3
 8001996:	f000 fdf6 	bl	8002586 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim16);
 800199a:	4b72      	ldr	r3, [pc, #456]	; (8001b64 <main+0x200>)
 800199c:	0018      	movs	r0, r3
 800199e:	f000 fed5 	bl	800274c <HAL_TIM_Base_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// чтение температуры по таймауту
		if (time_DS18B20_Read >= TIME_OUT_DS18B20_Read) {
 80019a2:	4b71      	ldr	r3, [pc, #452]	; (8001b68 <main+0x204>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	23fa      	movs	r3, #250	; 0xfa
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d200      	bcs.n	80019b0 <main+0x4c>
 80019ae:	e0ae      	b.n	8001b0e <main+0x1aa>
			switch (event_DS18B20) {
 80019b0:	4b6e      	ldr	r3, [pc, #440]	; (8001b6c <main+0x208>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d900      	bls.n	80019ba <main+0x56>
 80019b8:	e0a2      	b.n	8001b00 <main+0x19c>
 80019ba:	009a      	lsls	r2, r3, #2
 80019bc:	4b6c      	ldr	r3, [pc, #432]	; (8001b70 <main+0x20c>)
 80019be:	18d3      	adds	r3, r2, r3
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	469f      	mov	pc, r3
			case 0:
				Presence = DS18B20_Start();
 80019c4:	f7ff feca 	bl	800175c <DS18B20_Start>
 80019c8:	0003      	movs	r3, r0
 80019ca:	001a      	movs	r2, r3
 80019cc:	4b69      	ldr	r3, [pc, #420]	; (8001b74 <main+0x210>)
 80019ce:	701a      	strb	r2, [r3, #0]
				time_out_DS18B20 = 1; // установки таймера задержки
 80019d0:	4b69      	ldr	r3, [pc, #420]	; (8001b78 <main+0x214>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
				time_DS18B20 = 0;
 80019d6:	4b69      	ldr	r3, [pc, #420]	; (8001b7c <main+0x218>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
				event_DS18B20 = 1;
 80019dc:	4b63      	ldr	r3, [pc, #396]	; (8001b6c <main+0x208>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
				break;
 80019e2:	e094      	b.n	8001b0e <main+0x1aa>
			case 1:
				if (time_DS18B20 >= time_out_DS18B20) {
 80019e4:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <main+0x218>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b63      	ldr	r3, [pc, #396]	; (8001b78 <main+0x214>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d200      	bcs.n	80019f2 <main+0x8e>
 80019f0:	e088      	b.n	8001b04 <main+0x1a0>
					DS18B20_Write(0xCC);  // skip ROM
 80019f2:	20cc      	movs	r0, #204	; 0xcc
 80019f4:	f7ff feed 	bl	80017d2 <DS18B20_Write>
					DS18B20_Write(0x44);  // convert t
 80019f8:	2044      	movs	r0, #68	; 0x44
 80019fa:	f7ff feea 	bl	80017d2 <DS18B20_Write>
					time_out_DS18B20 = 800; // установки таймера задержки
 80019fe:	4b5e      	ldr	r3, [pc, #376]	; (8001b78 <main+0x214>)
 8001a00:	22c8      	movs	r2, #200	; 0xc8
 8001a02:	0092      	lsls	r2, r2, #2
 8001a04:	601a      	str	r2, [r3, #0]
					time_DS18B20 = 0;
 8001a06:	4b5d      	ldr	r3, [pc, #372]	; (8001b7c <main+0x218>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
					event_DS18B20 = 2;
 8001a0c:	4b57      	ldr	r3, [pc, #348]	; (8001b6c <main+0x208>)
 8001a0e:	2202      	movs	r2, #2
 8001a10:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001a12:	e077      	b.n	8001b04 <main+0x1a0>
			case 2:
				if (time_DS18B20 >= time_out_DS18B20) {
 8001a14:	4b59      	ldr	r3, [pc, #356]	; (8001b7c <main+0x218>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b57      	ldr	r3, [pc, #348]	; (8001b78 <main+0x214>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d373      	bcc.n	8001b08 <main+0x1a4>
					Presence = DS18B20_Start();
 8001a20:	f7ff fe9c 	bl	800175c <DS18B20_Start>
 8001a24:	0003      	movs	r3, r0
 8001a26:	001a      	movs	r2, r3
 8001a28:	4b52      	ldr	r3, [pc, #328]	; (8001b74 <main+0x210>)
 8001a2a:	701a      	strb	r2, [r3, #0]
					time_out_DS18B20 = 1; // установки таймера задержки
 8001a2c:	4b52      	ldr	r3, [pc, #328]	; (8001b78 <main+0x214>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]
					time_DS18B20 = 0;
 8001a32:	4b52      	ldr	r3, [pc, #328]	; (8001b7c <main+0x218>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
					event_DS18B20 = 3;
 8001a38:	4b4c      	ldr	r3, [pc, #304]	; (8001b6c <main+0x208>)
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001a3e:	e063      	b.n	8001b08 <main+0x1a4>
			case 3:
				if (time_DS18B20 >= time_out_DS18B20) {
 8001a40:	4b4e      	ldr	r3, [pc, #312]	; (8001b7c <main+0x218>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <main+0x214>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d35f      	bcc.n	8001b0c <main+0x1a8>
					DS18B20_Write(0xCC);  // skip ROM
 8001a4c:	20cc      	movs	r0, #204	; 0xcc
 8001a4e:	f7ff fec0 	bl	80017d2 <DS18B20_Write>
					DS18B20_Write(0xBE);  // Read Scratch-pad
 8001a52:	20be      	movs	r0, #190	; 0xbe
 8001a54:	f7ff febd 	bl	80017d2 <DS18B20_Write>

					Temp_byte1 = DS18B20_Read();
 8001a58:	f7ff ff0d 	bl	8001876 <DS18B20_Read>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	001a      	movs	r2, r3
 8001a60:	4b47      	ldr	r3, [pc, #284]	; (8001b80 <main+0x21c>)
 8001a62:	701a      	strb	r2, [r3, #0]
					Temp_byte2 = DS18B20_Read();
 8001a64:	f7ff ff07 	bl	8001876 <DS18B20_Read>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	001a      	movs	r2, r3
 8001a6c:	4b45      	ldr	r3, [pc, #276]	; (8001b84 <main+0x220>)
 8001a6e:	701a      	strb	r2, [r3, #0]
					TEMP = (Temp_byte2 << 8) | Temp_byte1;
 8001a70:	4b44      	ldr	r3, [pc, #272]	; (8001b84 <main+0x220>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	b21a      	sxth	r2, r3
 8001a78:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <main+0x21c>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	4b40      	ldr	r3, [pc, #256]	; (8001b88 <main+0x224>)
 8001a86:	801a      	strh	r2, [r3, #0]
					Temperature = (float) TEMP / 16;
 8001a88:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <main+0x224>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f7ff f9a7 	bl	8000de0 <__aeabi_ui2f>
 8001a92:	1c03      	adds	r3, r0, #0
 8001a94:	2183      	movs	r1, #131	; 0x83
 8001a96:	05c9      	lsls	r1, r1, #23
 8001a98:	1c18      	adds	r0, r3, #0
 8001a9a:	f7fe fd79 	bl	8000590 <__aeabi_fdiv>
 8001a9e:	1c03      	adds	r3, r0, #0
 8001aa0:	1c1a      	adds	r2, r3, #0
 8001aa2:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <main+0x228>)
 8001aa4:	601a      	str	r2, [r3, #0]

					time_out_DS18B20 = 0;	// сброс таймера задержки
 8001aa6:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <main+0x214>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
					time_DS18B20 = 0;
 8001aac:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <main+0x218>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
					time_DS18B20_Read = 0; // сброс таймера опроса
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <main+0x204>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
					event_DS18B20 = 4;
 8001ab8:	4b2c      	ldr	r3, [pc, #176]	; (8001b6c <main+0x208>)
 8001aba:	2204      	movs	r2, #4
 8001abc:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001abe:	e025      	b.n	8001b0c <main+0x1a8>
			case 4:
				// если температура долго не меняется включить на максимум

				// управление симистором
				delay_dimm_us = (uint32_t)map(Temperature, setTEMP, setTEMP + 10, 0, 11000);
 8001ac0:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <main+0x228>)
 8001ac2:	681c      	ldr	r4, [r3, #0]
 8001ac4:	4b32      	ldr	r3, [pc, #200]	; (8001b90 <main+0x22c>)
 8001ac6:	681d      	ldr	r5, [r3, #0]
 8001ac8:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <main+0x22c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4931      	ldr	r1, [pc, #196]	; (8001b94 <main+0x230>)
 8001ace:	1c18      	adds	r0, r3, #0
 8001ad0:	f7fe fbbe 	bl	8000250 <__aeabi_fadd>
 8001ad4:	1c03      	adds	r3, r0, #0
 8001ad6:	1c19      	adds	r1, r3, #0
 8001ad8:	2200      	movs	r2, #0
 8001ada:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <main+0x234>)
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	1c13      	adds	r3, r2, #0
 8001ae0:	1c0a      	adds	r2, r1, #0
 8001ae2:	1c29      	adds	r1, r5, #0
 8001ae4:	1c20      	adds	r0, r4, #0
 8001ae6:	f7ff ff11 	bl	800190c <map>
 8001aea:	1c03      	adds	r3, r0, #0
 8001aec:	1c18      	adds	r0, r3, #0
 8001aee:	f7fe fb97 	bl	8000220 <__aeabi_f2uiz>
 8001af2:	0002      	movs	r2, r0
 8001af4:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <main+0x238>)
 8001af6:	601a      	str	r2, [r3, #0]

				event_DS18B20 = 0;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <main+0x208>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
				break;
 8001afe:	e006      	b.n	8001b0e <main+0x1aa>
			default:
				break;
 8001b00:	46c0      	nop			; (mov r8, r8)
 8001b02:	e004      	b.n	8001b0e <main+0x1aa>
				break;
 8001b04:	46c0      	nop			; (mov r8, r8)
 8001b06:	e002      	b.n	8001b0e <main+0x1aa>
				break;
 8001b08:	46c0      	nop			; (mov r8, r8)
 8001b0a:	e000      	b.n	8001b0e <main+0x1aa>
				break;
 8001b0c:	46c0      	nop			; (mov r8, r8)
		}
		*/



		if ((HAL_GetTick() - oldTime) > 1) {
 8001b0e:	f000 fac5 	bl	800209c <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <main+0x1fc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d800      	bhi.n	8001b20 <main+0x1bc>
 8001b1e:	e740      	b.n	80019a2 <main+0x3e>

			time = (HAL_GetTick() - oldTime);
 8001b20:	f000 fabc 	bl	800209c <HAL_GetTick>
 8001b24:	0002      	movs	r2, r0
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <main+0x1fc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	1ad2      	subs	r2, r2, r3
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <main+0x23c>)
 8001b2e:	601a      	str	r2, [r3, #0]

			time_DS18B20_Read += time;
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <main+0x204>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <main+0x23c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	18d2      	adds	r2, r2, r3
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <main+0x204>)
 8001b3c:	601a      	str	r2, [r3, #0]
			time_DS18B20 += time;
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <main+0x218>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <main+0x23c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	18d2      	adds	r2, r2, r3
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <main+0x218>)
 8001b4a:	601a      	str	r2, [r3, #0]

			/*if (flag_Dimer_Start) {
				time_Dimmer += time;
			}*/
			time = 0;
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <main+0x23c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
			oldTime = HAL_GetTick();
 8001b52:	f000 faa3 	bl	800209c <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	4b01      	ldr	r3, [pc, #4]	; (8001b60 <main+0x1fc>)
 8001b5a:	601a      	str	r2, [r3, #0]
		if (time_DS18B20_Read >= TIME_OUT_DS18B20_Read) {
 8001b5c:	e721      	b.n	80019a2 <main+0x3e>
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	20000040 	.word	0x20000040
 8001b64:	20000054 	.word	0x20000054
 8001b68:	2000004c 	.word	0x2000004c
 8001b6c:	20000050 	.word	0x20000050
 8001b70:	08003828 	.word	0x08003828
 8001b74:	20000038 	.word	0x20000038
 8001b78:	20000004 	.word	0x20000004
 8001b7c:	20000048 	.word	0x20000048
 8001b80:	20000039 	.word	0x20000039
 8001b84:	2000003a 	.word	0x2000003a
 8001b88:	2000003c 	.word	0x2000003c
 8001b8c:	20000034 	.word	0x20000034
 8001b90:	20000000 	.word	0x20000000
 8001b94:	41200000 	.word	0x41200000
 8001b98:	462be000 	.word	0x462be000
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	20000044 	.word	0x20000044

08001ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f7ff fd57 	bl	800165c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	f7ff fd68 	bl	8001684 <LL_FLASH_GetLatency>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d1fa      	bne.n	8001bb0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001bba:	f7ff fc71 	bl	80014a0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	f7ff fc7c 	bl	80014bc <LL_RCC_HSI_IsReady>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d1fa      	bne.n	8001bc0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001bca:	2010      	movs	r0, #16
 8001bcc:	f7ff fc86 	bl	80014dc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_12);
 8001bd0:	23a0      	movs	r3, #160	; 0xa0
 8001bd2:	039b      	lsls	r3, r3, #14
 8001bd4:	0019      	movs	r1, r3
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff fd1a 	bl	8001610 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001bdc:	f7ff fcf6 	bl	80015cc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001be0:	46c0      	nop			; (mov r8, r8)
 8001be2:	f7ff fd01 	bl	80015e8 <LL_RCC_PLL_IsReady>
 8001be6:	0003      	movs	r3, r0
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d1fa      	bne.n	8001be2 <SystemClock_Config+0x3e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001bec:	2000      	movs	r0, #0
 8001bee:	f7ff fca9 	bl	8001544 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f7ff fcba 	bl	800156c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f7ff fc83 	bl	8001504 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	f7ff fc94 	bl	800152c <LL_RCC_GetSysClkSource>
 8001c04:	0003      	movs	r3, r0
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d1fa      	bne.n	8001c00 <SystemClock_Config+0x5c>
  {

  }
  LL_SetSystemCoreClock(48000000);
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <SystemClock_Config+0x88>)
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f001 fd85 	bl	800371c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001c12:	2003      	movs	r0, #3
 8001c14:	f000 f9fc 	bl	8002010 <HAL_InitTick>
 8001c18:	1e03      	subs	r3, r0, #0
 8001c1a:	d001      	beq.n	8001c20 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001c1c:	f000 f82c 	bl	8001c78 <Error_Handler>
  }
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff fcb9 	bl	8001598 <LL_RCC_SetUSARTClockSource>
}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	02dc6c00 	.word	0x02dc6c00

08001c30 <HAL_TIM_PeriodElapsedCallback>:
	}
}

//HAL_TIM_OC_Start_IT(&htim17);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(CTR_GPIO_Port, CTR_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, GPIO_PIN_SET);
		flag_pulse_Start = 1;
	}*/

	if(htim->Instance == htim17.Instance)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d110      	bne.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		HAL_TIM_Base_Stop_IT(&htim17);
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c46:	0018      	movs	r0, r3
 8001c48:	f000 fdbe 	bl	80027c8 <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(CTR_GPIO_Port, CTR_Pin, GPIO_PIN_SET);
 8001c4c:	2390      	movs	r3, #144	; 0x90
 8001c4e:	05db      	lsls	r3, r3, #23
 8001c50:	2201      	movs	r2, #1
 8001c52:	2140      	movs	r1, #64	; 0x40
 8001c54:	0018      	movs	r0, r3
 8001c56:	f000 fc96 	bl	8002586 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, GPIO_PIN_SET);
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2102      	movs	r1, #2
 8001c60:	0018      	movs	r0, r3
 8001c62:	f000 fc90 	bl	8002586 <HAL_GPIO_WritePin>
	}
}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b002      	add	sp, #8
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	2000009c 	.word	0x2000009c
 8001c74:	48000400 	.word	0x48000400

08001c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c7c:	b672      	cpsid	i
}
 8001c7e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c80:	e7fe      	b.n	8001c80 <Error_Handler+0x8>
	...

08001c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_MspInit+0x44>)
 8001c8c:	699a      	ldr	r2, [r3, #24]
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_MspInit+0x44>)
 8001c90:	2101      	movs	r1, #1
 8001c92:	430a      	orrs	r2, r1
 8001c94:	619a      	str	r2, [r3, #24]
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_MspInit+0x44>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_MspInit+0x44>)
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_MspInit+0x44>)
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0549      	lsls	r1, r1, #21
 8001cac:	430a      	orrs	r2, r1
 8001cae:	61da      	str	r2, [r3, #28]
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_MspInit+0x44>)
 8001cb2:	69da      	ldr	r2, [r3, #28]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	055b      	lsls	r3, r3, #21
 8001cb8:	4013      	ands	r3, r2
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b002      	add	sp, #8
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	40021000 	.word	0x40021000

08001ccc <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <LL_EXTI_IsActiveFlag_0_31+0x24>)
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	425a      	negs	r2, r3
 8001ce2:	4153      	adcs	r3, r2
 8001ce4:	b2db      	uxtb	r3, r3
}
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b002      	add	sp, #8
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	40010400 	.word	0x40010400

08001cf4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <LL_EXTI_ClearFlag_0_31+0x18>)
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	615a      	str	r2, [r3, #20]
}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b002      	add	sp, #8
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	40010400 	.word	0x40010400

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <NMI_Handler+0x4>

08001d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <HardFault_Handler+0x4>

08001d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d34:	f000 f9a0 	bl	8002078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_7) != RESET)
 8001d42:	2080      	movs	r0, #128	; 0x80
 8001d44:	f7ff ffc2 	bl	8001ccc <LL_EXTI_IsActiveFlag_0_31>
 8001d48:	1e03      	subs	r3, r0, #0
 8001d4a:	d002      	beq.n	8001d52 <EXTI4_15_IRQHandler+0x14>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_7);
 8001d4c:	2080      	movs	r0, #128	; 0x80
 8001d4e:	f7ff ffd1 	bl	8001cf4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_7 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <TIM17_IRQHandler+0x14>)
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f000 fd60 	bl	8002824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	2000009c 	.word	0x2000009c

08001d70 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <MX_TIM16_Init+0x44>)
 8001d82:	4a10      	ldr	r2, [pc, #64]	; (8001dc4 <MX_TIM16_Init+0x48>)
 8001d84:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48-1;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <MX_TIM16_Init+0x44>)
 8001d88:	222f      	movs	r2, #47	; 0x2f
 8001d8a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <MX_TIM16_Init+0x44>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <MX_TIM16_Init+0x44>)
 8001d94:	4a0c      	ldr	r2, [pc, #48]	; (8001dc8 <MX_TIM16_Init+0x4c>)
 8001d96:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <MX_TIM16_Init+0x44>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <MX_TIM16_Init+0x44>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <MX_TIM16_Init+0x44>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <MX_TIM16_Init+0x44>)
 8001dac:	0018      	movs	r0, r3
 8001dae:	f000 fc7d 	bl	80026ac <HAL_TIM_Base_Init>
 8001db2:	1e03      	subs	r3, r0, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001db6:	f7ff ff5f 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000054 	.word	0x20000054
 8001dc4:	40014400 	.word	0x40014400
 8001dc8:	0000ffff 	.word	0x0000ffff

08001dcc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MX_TIM17_Init+0x44>)
 8001dd2:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <MX_TIM17_Init+0x48>)
 8001dd4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48-1;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <MX_TIM17_Init+0x44>)
 8001dd8:	222f      	movs	r2, #47	; 0x2f
 8001dda:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <MX_TIM17_Init+0x44>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <MX_TIM17_Init+0x44>)
 8001de4:	4a0c      	ldr	r2, [pc, #48]	; (8001e18 <MX_TIM17_Init+0x4c>)
 8001de6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <MX_TIM17_Init+0x44>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <MX_TIM17_Init+0x44>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <MX_TIM17_Init+0x44>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <MX_TIM17_Init+0x44>)
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f000 fc55 	bl	80026ac <HAL_TIM_Base_Init>
 8001e02:	1e03      	subs	r3, r0, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8001e06:	f7ff ff37 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	2000009c 	.word	0x2000009c
 8001e14:	40014800 	.word	0x40014800
 8001e18:	0000ffff 	.word	0x0000ffff

08001e1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <HAL_TIM_Base_MspInit+0x70>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d10e      	bne.n	8001e4c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_TIM_Base_MspInit+0x74>)
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <HAL_TIM_Base_MspInit+0x74>)
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	0289      	lsls	r1, r1, #10
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	619a      	str	r2, [r3, #24]
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <HAL_TIM_Base_MspInit+0x74>)
 8001e3e:	699a      	ldr	r2, [r3, #24]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	029b      	lsls	r3, r3, #10
 8001e44:	4013      	ands	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001e4a:	e01a      	b.n	8001e82 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM17)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <HAL_TIM_Base_MspInit+0x78>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d115      	bne.n	8001e82 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <HAL_TIM_Base_MspInit+0x74>)
 8001e58:	699a      	ldr	r2, [r3, #24]
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <HAL_TIM_Base_MspInit+0x74>)
 8001e5c:	2180      	movs	r1, #128	; 0x80
 8001e5e:	02c9      	lsls	r1, r1, #11
 8001e60:	430a      	orrs	r2, r1
 8001e62:	619a      	str	r2, [r3, #24]
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_TIM_Base_MspInit+0x74>)
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	02db      	lsls	r3, r3, #11
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	2016      	movs	r0, #22
 8001e78:	f000 f9c6 	bl	8002208 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001e7c:	2016      	movs	r0, #22
 8001e7e:	f000 f9d8 	bl	8002232 <HAL_NVIC_EnableIRQ>
}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b004      	add	sp, #16
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	40014400 	.word	0x40014400
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40014800 	.word	0x40014800

08001e98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <MX_USART1_UART_Init+0x58>)
 8001e9e:	4a15      	ldr	r2, [pc, #84]	; (8001ef4 <MX_USART1_UART_Init+0x5c>)
 8001ea0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <MX_USART1_UART_Init+0x58>)
 8001ea4:	22e1      	movs	r2, #225	; 0xe1
 8001ea6:	0252      	lsls	r2, r2, #9
 8001ea8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_USART1_UART_Init+0x58>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <MX_USART1_UART_Init+0x58>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MX_USART1_UART_Init+0x58>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_USART1_UART_Init+0x58>)
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <MX_USART1_UART_Init+0x58>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_USART1_UART_Init+0x58>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <MX_USART1_UART_Init+0x58>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_USART1_UART_Init+0x58>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <MX_USART1_UART_Init+0x58>)
 8001edc:	0018      	movs	r0, r3
 8001ede:	f000 fe53 	bl	8002b88 <HAL_UART_Init>
 8001ee2:	1e03      	subs	r3, r0, #0
 8001ee4:	d001      	beq.n	8001eea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001ee6:	f7ff fec7 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	200000e4 	.word	0x200000e4
 8001ef4:	40013800 	.word	0x40013800

08001ef8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b08b      	sub	sp, #44	; 0x2c
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	2414      	movs	r4, #20
 8001f02:	193b      	adds	r3, r7, r4
 8001f04:	0018      	movs	r0, r3
 8001f06:	2314      	movs	r3, #20
 8001f08:	001a      	movs	r2, r3
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	f001 fc14 	bl	8003738 <memset>
  if(uartHandle->Instance==USART1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <HAL_UART_MspInit+0x94>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d133      	bne.n	8001f82 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f1a:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <HAL_UART_MspInit+0x98>)
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <HAL_UART_MspInit+0x98>)
 8001f20:	2180      	movs	r1, #128	; 0x80
 8001f22:	01c9      	lsls	r1, r1, #7
 8001f24:	430a      	orrs	r2, r1
 8001f26:	619a      	str	r2, [r3, #24]
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_UART_MspInit+0x98>)
 8001f2a:	699a      	ldr	r2, [r3, #24]
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	01db      	lsls	r3, r3, #7
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_UART_MspInit+0x98>)
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_UART_MspInit+0x98>)
 8001f3c:	2180      	movs	r1, #128	; 0x80
 8001f3e:	0289      	lsls	r1, r1, #10
 8001f40:	430a      	orrs	r2, r1
 8001f42:	615a      	str	r2, [r3, #20]
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_UART_MspInit+0x98>)
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	029b      	lsls	r3, r3, #10
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f52:	193b      	adds	r3, r7, r4
 8001f54:	22c0      	movs	r2, #192	; 0xc0
 8001f56:	00d2      	lsls	r2, r2, #3
 8001f58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	0021      	movs	r1, r4
 8001f5c:	187b      	adds	r3, r7, r1
 8001f5e:	2202      	movs	r2, #2
 8001f60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	187b      	adds	r3, r7, r1
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f68:	187b      	adds	r3, r7, r1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001f6e:	187b      	adds	r3, r7, r1
 8001f70:	2201      	movs	r2, #1
 8001f72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f74:	187a      	adds	r2, r7, r1
 8001f76:	2390      	movs	r3, #144	; 0x90
 8001f78:	05db      	lsls	r3, r3, #23
 8001f7a:	0011      	movs	r1, r2
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 f975 	bl	800226c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b00b      	add	sp, #44	; 0x2c
 8001f88:	bd90      	pop	{r4, r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	40013800 	.word	0x40013800
 8001f90:	40021000 	.word	0x40021000

08001f94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f94:	480d      	ldr	r0, [pc, #52]	; (8001fcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f96:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f98:	f7ff feea 	bl	8001d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f9e:	490d      	ldr	r1, [pc, #52]	; (8001fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <LoopForever+0xe>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fb4:	4c0a      	ldr	r4, [pc, #40]	; (8001fe0 <LoopForever+0x16>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fc2:	f001 fbc1 	bl	8003748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fc6:	f7ff fccd 	bl	8001964 <main>

08001fca <LoopForever>:

LoopForever:
    b LoopForever
 8001fca:	e7fe      	b.n	8001fca <LoopForever>
  ldr   r0, =_estack
 8001fcc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001fd8:	0800386c 	.word	0x0800386c
  ldr r2, =_sbss
 8001fdc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001fe0:	20000170 	.word	0x20000170

08001fe4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <ADC1_IRQHandler>
	...

08001fe8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <HAL_Init+0x24>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_Init+0x24>)
 8001ff2:	2110      	movs	r1, #16
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	f000 f809 	bl	8002010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ffe:	f7ff fe41 	bl	8001c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	0018      	movs	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	40022000 	.word	0x40022000

08002010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002018:	4b14      	ldr	r3, [pc, #80]	; (800206c <HAL_InitTick+0x5c>)
 800201a:	681c      	ldr	r4, [r3, #0]
 800201c:	4b14      	ldr	r3, [pc, #80]	; (8002070 <HAL_InitTick+0x60>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	0019      	movs	r1, r3
 8002022:	23fa      	movs	r3, #250	; 0xfa
 8002024:	0098      	lsls	r0, r3, #2
 8002026:	f7fe f86f 	bl	8000108 <__udivsi3>
 800202a:	0003      	movs	r3, r0
 800202c:	0019      	movs	r1, r3
 800202e:	0020      	movs	r0, r4
 8002030:	f7fe f86a 	bl	8000108 <__udivsi3>
 8002034:	0003      	movs	r3, r0
 8002036:	0018      	movs	r0, r3
 8002038:	f000 f90b 	bl	8002252 <HAL_SYSTICK_Config>
 800203c:	1e03      	subs	r3, r0, #0
 800203e:	d001      	beq.n	8002044 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e00f      	b.n	8002064 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b03      	cmp	r3, #3
 8002048:	d80b      	bhi.n	8002062 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	2301      	movs	r3, #1
 800204e:	425b      	negs	r3, r3
 8002050:	2200      	movs	r2, #0
 8002052:	0018      	movs	r0, r3
 8002054:	f000 f8d8 	bl	8002208 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_InitTick+0x64>)
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
}
 8002064:	0018      	movs	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	b003      	add	sp, #12
 800206a:	bd90      	pop	{r4, r7, pc}
 800206c:	2000000c 	.word	0x2000000c
 8002070:	20000014 	.word	0x20000014
 8002074:	20000010 	.word	0x20000010

08002078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_IncTick+0x1c>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	001a      	movs	r2, r3
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_IncTick+0x20>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	18d2      	adds	r2, r2, r3
 8002088:	4b03      	ldr	r3, [pc, #12]	; (8002098 <HAL_IncTick+0x20>)
 800208a:	601a      	str	r2, [r3, #0]
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	20000014 	.word	0x20000014
 8002098:	2000016c 	.word	0x2000016c

0800209c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  return uwTick;
 80020a0:	4b02      	ldr	r3, [pc, #8]	; (80020ac <HAL_GetTick+0x10>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	0018      	movs	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	2000016c 	.word	0x2000016c

080020b0 <__NVIC_EnableIRQ>:
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	0002      	movs	r2, r0
 80020b8:	1dfb      	adds	r3, r7, #7
 80020ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	1dfb      	adds	r3, r7, #7
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b7f      	cmp	r3, #127	; 0x7f
 80020c2:	d809      	bhi.n	80020d8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	001a      	movs	r2, r3
 80020ca:	231f      	movs	r3, #31
 80020cc:	401a      	ands	r2, r3
 80020ce:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <__NVIC_EnableIRQ+0x30>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	4091      	lsls	r1, r2
 80020d4:	000a      	movs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
}
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	b002      	add	sp, #8
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <__NVIC_SetPriority>:
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	0002      	movs	r2, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020f2:	1dfb      	adds	r3, r7, #7
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b7f      	cmp	r3, #127	; 0x7f
 80020f8:	d828      	bhi.n	800214c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020fa:	4a2f      	ldr	r2, [pc, #188]	; (80021b8 <__NVIC_SetPriority+0xd4>)
 80020fc:	1dfb      	adds	r3, r7, #7
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b25b      	sxtb	r3, r3
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	33c0      	adds	r3, #192	; 0xc0
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	589b      	ldr	r3, [r3, r2]
 800210a:	1dfa      	adds	r2, r7, #7
 800210c:	7812      	ldrb	r2, [r2, #0]
 800210e:	0011      	movs	r1, r2
 8002110:	2203      	movs	r2, #3
 8002112:	400a      	ands	r2, r1
 8002114:	00d2      	lsls	r2, r2, #3
 8002116:	21ff      	movs	r1, #255	; 0xff
 8002118:	4091      	lsls	r1, r2
 800211a:	000a      	movs	r2, r1
 800211c:	43d2      	mvns	r2, r2
 800211e:	401a      	ands	r2, r3
 8002120:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	019b      	lsls	r3, r3, #6
 8002126:	22ff      	movs	r2, #255	; 0xff
 8002128:	401a      	ands	r2, r3
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	0018      	movs	r0, r3
 8002130:	2303      	movs	r3, #3
 8002132:	4003      	ands	r3, r0
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002138:	481f      	ldr	r0, [pc, #124]	; (80021b8 <__NVIC_SetPriority+0xd4>)
 800213a:	1dfb      	adds	r3, r7, #7
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b25b      	sxtb	r3, r3
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	430a      	orrs	r2, r1
 8002144:	33c0      	adds	r3, #192	; 0xc0
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	501a      	str	r2, [r3, r0]
}
 800214a:	e031      	b.n	80021b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800214c:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <__NVIC_SetPriority+0xd8>)
 800214e:	1dfb      	adds	r3, r7, #7
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	0019      	movs	r1, r3
 8002154:	230f      	movs	r3, #15
 8002156:	400b      	ands	r3, r1
 8002158:	3b08      	subs	r3, #8
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3306      	adds	r3, #6
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	18d3      	adds	r3, r2, r3
 8002162:	3304      	adds	r3, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	1dfa      	adds	r2, r7, #7
 8002168:	7812      	ldrb	r2, [r2, #0]
 800216a:	0011      	movs	r1, r2
 800216c:	2203      	movs	r2, #3
 800216e:	400a      	ands	r2, r1
 8002170:	00d2      	lsls	r2, r2, #3
 8002172:	21ff      	movs	r1, #255	; 0xff
 8002174:	4091      	lsls	r1, r2
 8002176:	000a      	movs	r2, r1
 8002178:	43d2      	mvns	r2, r2
 800217a:	401a      	ands	r2, r3
 800217c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	019b      	lsls	r3, r3, #6
 8002182:	22ff      	movs	r2, #255	; 0xff
 8002184:	401a      	ands	r2, r3
 8002186:	1dfb      	adds	r3, r7, #7
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	0018      	movs	r0, r3
 800218c:	2303      	movs	r3, #3
 800218e:	4003      	ands	r3, r0
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002194:	4809      	ldr	r0, [pc, #36]	; (80021bc <__NVIC_SetPriority+0xd8>)
 8002196:	1dfb      	adds	r3, r7, #7
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	001c      	movs	r4, r3
 800219c:	230f      	movs	r3, #15
 800219e:	4023      	ands	r3, r4
 80021a0:	3b08      	subs	r3, #8
 80021a2:	089b      	lsrs	r3, r3, #2
 80021a4:	430a      	orrs	r2, r1
 80021a6:	3306      	adds	r3, #6
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	18c3      	adds	r3, r0, r3
 80021ac:	3304      	adds	r3, #4
 80021ae:	601a      	str	r2, [r3, #0]
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b003      	add	sp, #12
 80021b6:	bd90      	pop	{r4, r7, pc}
 80021b8:	e000e100 	.word	0xe000e100
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	1e5a      	subs	r2, r3, #1
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	045b      	lsls	r3, r3, #17
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d301      	bcc.n	80021d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d4:	2301      	movs	r3, #1
 80021d6:	e010      	b.n	80021fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <SysTick_Config+0x44>)
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	3a01      	subs	r2, #1
 80021de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e0:	2301      	movs	r3, #1
 80021e2:	425b      	negs	r3, r3
 80021e4:	2103      	movs	r1, #3
 80021e6:	0018      	movs	r0, r3
 80021e8:	f7ff ff7c 	bl	80020e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <SysTick_Config+0x44>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <SysTick_Config+0x44>)
 80021f4:	2207      	movs	r2, #7
 80021f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	0018      	movs	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b002      	add	sp, #8
 8002200:	bd80      	pop	{r7, pc}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	e000e010 	.word	0xe000e010

08002208 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	210f      	movs	r1, #15
 8002214:	187b      	adds	r3, r7, r1
 8002216:	1c02      	adds	r2, r0, #0
 8002218:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	187b      	adds	r3, r7, r1
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	b25b      	sxtb	r3, r3
 8002222:	0011      	movs	r1, r2
 8002224:	0018      	movs	r0, r3
 8002226:	f7ff ff5d 	bl	80020e4 <__NVIC_SetPriority>
}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	46bd      	mov	sp, r7
 800222e:	b004      	add	sp, #16
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	0002      	movs	r2, r0
 800223a:	1dfb      	adds	r3, r7, #7
 800223c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800223e:	1dfb      	adds	r3, r7, #7
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b25b      	sxtb	r3, r3
 8002244:	0018      	movs	r0, r3
 8002246:	f7ff ff33 	bl	80020b0 <__NVIC_EnableIRQ>
}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	46bd      	mov	sp, r7
 800224e:	b002      	add	sp, #8
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	0018      	movs	r0, r3
 800225e:	f7ff ffaf 	bl	80021c0 <SysTick_Config>
 8002262:	0003      	movs	r3, r0
}
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800227a:	e14f      	b.n	800251c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4091      	lsls	r1, r2
 8002286:	000a      	movs	r2, r1
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d100      	bne.n	8002294 <HAL_GPIO_Init+0x28>
 8002292:	e140      	b.n	8002516 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2203      	movs	r2, #3
 800229a:	4013      	ands	r3, r2
 800229c:	2b01      	cmp	r3, #1
 800229e:	d005      	beq.n	80022ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2203      	movs	r2, #3
 80022a6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d130      	bne.n	800230e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	409a      	lsls	r2, r3
 80022ba:	0013      	movs	r3, r2
 80022bc:	43da      	mvns	r2, r3
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	409a      	lsls	r2, r3
 80022ce:	0013      	movs	r3, r2
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e2:	2201      	movs	r2, #1
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	409a      	lsls	r2, r3
 80022e8:	0013      	movs	r3, r2
 80022ea:	43da      	mvns	r2, r3
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	2201      	movs	r2, #1
 80022fa:	401a      	ands	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	409a      	lsls	r2, r3
 8002300:	0013      	movs	r3, r2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2203      	movs	r2, #3
 8002314:	4013      	ands	r3, r2
 8002316:	2b03      	cmp	r3, #3
 8002318:	d017      	beq.n	800234a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	409a      	lsls	r2, r3
 8002328:	0013      	movs	r3, r2
 800232a:	43da      	mvns	r2, r3
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	409a      	lsls	r2, r3
 800233c:	0013      	movs	r3, r2
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2203      	movs	r2, #3
 8002350:	4013      	ands	r3, r2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d123      	bne.n	800239e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	0092      	lsls	r2, r2, #2
 8002360:	58d3      	ldr	r3, [r2, r3]
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2207      	movs	r2, #7
 8002368:	4013      	ands	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	409a      	lsls	r2, r3
 8002370:	0013      	movs	r3, r2
 8002372:	43da      	mvns	r2, r3
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2107      	movs	r1, #7
 8002382:	400b      	ands	r3, r1
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	409a      	lsls	r2, r3
 8002388:	0013      	movs	r3, r2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	08da      	lsrs	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3208      	adds	r2, #8
 8002398:	0092      	lsls	r2, r2, #2
 800239a:	6939      	ldr	r1, [r7, #16]
 800239c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2203      	movs	r2, #3
 80023aa:	409a      	lsls	r2, r3
 80023ac:	0013      	movs	r3, r2
 80023ae:	43da      	mvns	r2, r3
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2203      	movs	r2, #3
 80023bc:	401a      	ands	r2, r3
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	409a      	lsls	r2, r3
 80023c4:	0013      	movs	r3, r2
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	23c0      	movs	r3, #192	; 0xc0
 80023d8:	029b      	lsls	r3, r3, #10
 80023da:	4013      	ands	r3, r2
 80023dc:	d100      	bne.n	80023e0 <HAL_GPIO_Init+0x174>
 80023de:	e09a      	b.n	8002516 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e0:	4b54      	ldr	r3, [pc, #336]	; (8002534 <HAL_GPIO_Init+0x2c8>)
 80023e2:	699a      	ldr	r2, [r3, #24]
 80023e4:	4b53      	ldr	r3, [pc, #332]	; (8002534 <HAL_GPIO_Init+0x2c8>)
 80023e6:	2101      	movs	r1, #1
 80023e8:	430a      	orrs	r2, r1
 80023ea:	619a      	str	r2, [r3, #24]
 80023ec:	4b51      	ldr	r3, [pc, #324]	; (8002534 <HAL_GPIO_Init+0x2c8>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2201      	movs	r2, #1
 80023f2:	4013      	ands	r3, r2
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023f8:	4a4f      	ldr	r2, [pc, #316]	; (8002538 <HAL_GPIO_Init+0x2cc>)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	589b      	ldr	r3, [r3, r2]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2203      	movs	r2, #3
 800240a:	4013      	ands	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	220f      	movs	r2, #15
 8002410:	409a      	lsls	r2, r3
 8002412:	0013      	movs	r3, r2
 8002414:	43da      	mvns	r2, r3
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	2390      	movs	r3, #144	; 0x90
 8002420:	05db      	lsls	r3, r3, #23
 8002422:	429a      	cmp	r2, r3
 8002424:	d013      	beq.n	800244e <HAL_GPIO_Init+0x1e2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a44      	ldr	r2, [pc, #272]	; (800253c <HAL_GPIO_Init+0x2d0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00d      	beq.n	800244a <HAL_GPIO_Init+0x1de>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a43      	ldr	r2, [pc, #268]	; (8002540 <HAL_GPIO_Init+0x2d4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d007      	beq.n	8002446 <HAL_GPIO_Init+0x1da>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a42      	ldr	r2, [pc, #264]	; (8002544 <HAL_GPIO_Init+0x2d8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d101      	bne.n	8002442 <HAL_GPIO_Init+0x1d6>
 800243e:	2303      	movs	r3, #3
 8002440:	e006      	b.n	8002450 <HAL_GPIO_Init+0x1e4>
 8002442:	2305      	movs	r3, #5
 8002444:	e004      	b.n	8002450 <HAL_GPIO_Init+0x1e4>
 8002446:	2302      	movs	r3, #2
 8002448:	e002      	b.n	8002450 <HAL_GPIO_Init+0x1e4>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_GPIO_Init+0x1e4>
 800244e:	2300      	movs	r3, #0
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	2103      	movs	r1, #3
 8002454:	400a      	ands	r2, r1
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	4093      	lsls	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002460:	4935      	ldr	r1, [pc, #212]	; (8002538 <HAL_GPIO_Init+0x2cc>)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	3302      	adds	r3, #2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246e:	4b36      	ldr	r3, [pc, #216]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	43da      	mvns	r2, r3
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	035b      	lsls	r3, r3, #13
 8002486:	4013      	ands	r3, r2
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002492:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	43da      	mvns	r2, r3
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	039b      	lsls	r3, r3, #14
 80024b0:	4013      	ands	r3, r2
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024bc:	4b22      	ldr	r3, [pc, #136]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80024c2:	4b21      	ldr	r3, [pc, #132]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43da      	mvns	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	029b      	lsls	r3, r3, #10
 80024da:	4013      	ands	r3, r2
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80024ec:	4b16      	ldr	r3, [pc, #88]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43da      	mvns	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	025b      	lsls	r3, r3, #9
 8002504:	4013      	ands	r3, r2
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3301      	adds	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	40da      	lsrs	r2, r3
 8002524:	1e13      	subs	r3, r2, #0
 8002526:	d000      	beq.n	800252a <HAL_GPIO_Init+0x2be>
 8002528:	e6a8      	b.n	800227c <HAL_GPIO_Init+0x10>
  } 
}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	46c0      	nop			; (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	b006      	add	sp, #24
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000
 8002538:	40010000 	.word	0x40010000
 800253c:	48000400 	.word	0x48000400
 8002540:	48000800 	.word	0x48000800
 8002544:	48000c00 	.word	0x48000c00
 8002548:	40010400 	.word	0x40010400

0800254c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	000a      	movs	r2, r1
 8002556:	1cbb      	adds	r3, r7, #2
 8002558:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	1cba      	adds	r2, r7, #2
 8002560:	8812      	ldrh	r2, [r2, #0]
 8002562:	4013      	ands	r3, r2
 8002564:	d004      	beq.n	8002570 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002566:	230f      	movs	r3, #15
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	e003      	b.n	8002578 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002570:	230f      	movs	r3, #15
 8002572:	18fb      	adds	r3, r7, r3
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002578:	230f      	movs	r3, #15
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	781b      	ldrb	r3, [r3, #0]
  }
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b004      	add	sp, #16
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	0008      	movs	r0, r1
 8002590:	0011      	movs	r1, r2
 8002592:	1cbb      	adds	r3, r7, #2
 8002594:	1c02      	adds	r2, r0, #0
 8002596:	801a      	strh	r2, [r3, #0]
 8002598:	1c7b      	adds	r3, r7, #1
 800259a:	1c0a      	adds	r2, r1, #0
 800259c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800259e:	1c7b      	adds	r3, r7, #1
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d004      	beq.n	80025b0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025a6:	1cbb      	adds	r3, r7, #2
 80025a8:	881a      	ldrh	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025ae:	e003      	b.n	80025b8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025b0:	1cbb      	adds	r3, r7, #2
 80025b2:	881a      	ldrh	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025b8:	46c0      	nop			; (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b002      	add	sp, #8
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	2300      	movs	r3, #0
 80025d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	220c      	movs	r2, #12
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d002      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x30>
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x36>
 80025ee:	e02c      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025f2:	613b      	str	r3, [r7, #16]
      break;
 80025f4:	e02c      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	0c9b      	lsrs	r3, r3, #18
 80025fa:	220f      	movs	r2, #15
 80025fc:	4013      	ands	r3, r2
 80025fe:	4a19      	ldr	r2, [pc, #100]	; (8002664 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002600:	5cd3      	ldrb	r3, [r2, r3]
 8002602:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002604:	4b15      	ldr	r3, [pc, #84]	; (800265c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	220f      	movs	r2, #15
 800260a:	4013      	ands	r3, r2
 800260c:	4a16      	ldr	r2, [pc, #88]	; (8002668 <HAL_RCC_GetSysClockFreq+0xa8>)
 800260e:	5cd3      	ldrb	r3, [r2, r3]
 8002610:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	025b      	lsls	r3, r3, #9
 8002618:	4013      	ands	r3, r2
 800261a:	d009      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	4810      	ldr	r0, [pc, #64]	; (8002660 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002620:	f7fd fd72 	bl	8000108 <__udivsi3>
 8002624:	0003      	movs	r3, r0
 8002626:	001a      	movs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4353      	muls	r3, r2
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e009      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	000a      	movs	r2, r1
 8002634:	0152      	lsls	r2, r2, #5
 8002636:	1a52      	subs	r2, r2, r1
 8002638:	0193      	lsls	r3, r2, #6
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	185b      	adds	r3, r3, r1
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	613b      	str	r3, [r7, #16]
      break;
 8002648:	e002      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCC_GetSysClockFreq+0xa0>)
 800264c:	613b      	str	r3, [r7, #16]
      break;
 800264e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002650:	693b      	ldr	r3, [r7, #16]
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	b006      	add	sp, #24
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	40021000 	.word	0x40021000
 8002660:	007a1200 	.word	0x007a1200
 8002664:	08003844 	.word	0x08003844
 8002668:	08003854 	.word	0x08003854

0800266c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002670:	4b02      	ldr	r3, [pc, #8]	; (800267c <HAL_RCC_GetHCLKFreq+0x10>)
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	2000000c 	.word	0x2000000c

08002680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002684:	f7ff fff2 	bl	800266c <HAL_RCC_GetHCLKFreq>
 8002688:	0001      	movs	r1, r0
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	2207      	movs	r2, #7
 8002692:	4013      	ands	r3, r2
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002696:	5cd3      	ldrb	r3, [r2, r3]
 8002698:	40d9      	lsrs	r1, r3
 800269a:	000b      	movs	r3, r1
}    
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	40021000 	.word	0x40021000
 80026a8:	0800383c 	.word	0x0800383c

080026ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e042      	b.n	8002744 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	223d      	movs	r2, #61	; 0x3d
 80026c2:	5c9b      	ldrb	r3, [r3, r2]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d107      	bne.n	80026da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	223c      	movs	r2, #60	; 0x3c
 80026ce:	2100      	movs	r1, #0
 80026d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f7ff fba1 	bl	8001e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	223d      	movs	r2, #61	; 0x3d
 80026de:	2102      	movs	r1, #2
 80026e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3304      	adds	r3, #4
 80026ea:	0019      	movs	r1, r3
 80026ec:	0010      	movs	r0, r2
 80026ee:	f000 f9cf 	bl	8002a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2246      	movs	r2, #70	; 0x46
 80026f6:	2101      	movs	r1, #1
 80026f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	223e      	movs	r2, #62	; 0x3e
 80026fe:	2101      	movs	r1, #1
 8002700:	5499      	strb	r1, [r3, r2]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	223f      	movs	r2, #63	; 0x3f
 8002706:	2101      	movs	r1, #1
 8002708:	5499      	strb	r1, [r3, r2]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2240      	movs	r2, #64	; 0x40
 800270e:	2101      	movs	r1, #1
 8002710:	5499      	strb	r1, [r3, r2]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2241      	movs	r2, #65	; 0x41
 8002716:	2101      	movs	r1, #1
 8002718:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2242      	movs	r2, #66	; 0x42
 800271e:	2101      	movs	r1, #1
 8002720:	5499      	strb	r1, [r3, r2]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2243      	movs	r2, #67	; 0x43
 8002726:	2101      	movs	r1, #1
 8002728:	5499      	strb	r1, [r3, r2]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2244      	movs	r2, #68	; 0x44
 800272e:	2101      	movs	r1, #1
 8002730:	5499      	strb	r1, [r3, r2]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2245      	movs	r2, #69	; 0x45
 8002736:	2101      	movs	r1, #1
 8002738:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	223d      	movs	r2, #61	; 0x3d
 800273e:	2101      	movs	r1, #1
 8002740:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	0018      	movs	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	b002      	add	sp, #8
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	223d      	movs	r2, #61	; 0x3d
 8002758:	5c9b      	ldrb	r3, [r3, r2]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b01      	cmp	r3, #1
 800275e:	d001      	beq.n	8002764 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e028      	b.n	80027b6 <HAL_TIM_Base_Start+0x6a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	223d      	movs	r2, #61	; 0x3d
 8002768:	2102      	movs	r1, #2
 800276a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a13      	ldr	r2, [pc, #76]	; (80027c0 <HAL_TIM_Base_Start+0x74>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d004      	beq.n	8002780 <HAL_TIM_Base_Start+0x34>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <HAL_TIM_Base_Start+0x78>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d111      	bne.n	80027a4 <HAL_TIM_Base_Start+0x58>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2207      	movs	r2, #7
 8002788:	4013      	ands	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b06      	cmp	r3, #6
 8002790:	d010      	beq.n	80027b4 <HAL_TIM_Base_Start+0x68>
    {
      __HAL_TIM_ENABLE(htim);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2101      	movs	r1, #1
 800279e:	430a      	orrs	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a2:	e007      	b.n	80027b4 <HAL_TIM_Base_Start+0x68>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2101      	movs	r1, #1
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	0018      	movs	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b004      	add	sp, #16
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	40012c00 	.word	0x40012c00
 80027c4:	40000400 	.word	0x40000400

080027c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2101      	movs	r1, #1
 80027dc:	438a      	bics	r2, r1
 80027de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4a0d      	ldr	r2, [pc, #52]	; (800281c <HAL_TIM_Base_Stop_IT+0x54>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	d10d      	bne.n	8002808 <HAL_TIM_Base_Stop_IT+0x40>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <HAL_TIM_Base_Stop_IT+0x58>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	d107      	bne.n	8002808 <HAL_TIM_Base_Stop_IT+0x40>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2101      	movs	r1, #1
 8002804:	438a      	bics	r2, r1
 8002806:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	223d      	movs	r2, #61	; 0x3d
 800280c:	2101      	movs	r1, #1
 800280e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	0018      	movs	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	b002      	add	sp, #8
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	00001111 	.word	0x00001111
 8002820:	00000444 	.word	0x00000444

08002824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2202      	movs	r2, #2
 8002834:	4013      	ands	r3, r2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d124      	bne.n	8002884 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2202      	movs	r2, #2
 8002842:	4013      	ands	r3, r2
 8002844:	2b02      	cmp	r3, #2
 8002846:	d11d      	bne.n	8002884 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2203      	movs	r2, #3
 800284e:	4252      	negs	r2, r2
 8002850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2203      	movs	r2, #3
 8002860:	4013      	ands	r3, r2
 8002862:	d004      	beq.n	800286e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	0018      	movs	r0, r3
 8002868:	f000 f8fa 	bl	8002a60 <HAL_TIM_IC_CaptureCallback>
 800286c:	e007      	b.n	800287e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0018      	movs	r0, r3
 8002872:	f000 f8ed 	bl	8002a50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	0018      	movs	r0, r3
 800287a:	f000 f8f9 	bl	8002a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2204      	movs	r2, #4
 800288c:	4013      	ands	r3, r2
 800288e:	2b04      	cmp	r3, #4
 8002890:	d125      	bne.n	80028de <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2204      	movs	r2, #4
 800289a:	4013      	ands	r3, r2
 800289c:	2b04      	cmp	r3, #4
 800289e:	d11e      	bne.n	80028de <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2205      	movs	r2, #5
 80028a6:	4252      	negs	r2, r2
 80028a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	23c0      	movs	r3, #192	; 0xc0
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4013      	ands	r3, r2
 80028bc:	d004      	beq.n	80028c8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	0018      	movs	r0, r3
 80028c2:	f000 f8cd 	bl	8002a60 <HAL_TIM_IC_CaptureCallback>
 80028c6:	e007      	b.n	80028d8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 f8c0 	bl	8002a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 f8cc 	bl	8002a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2208      	movs	r2, #8
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d124      	bne.n	8002936 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2208      	movs	r2, #8
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d11d      	bne.n	8002936 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2209      	movs	r2, #9
 8002900:	4252      	negs	r2, r2
 8002902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2204      	movs	r2, #4
 8002908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	2203      	movs	r2, #3
 8002912:	4013      	ands	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	0018      	movs	r0, r3
 800291a:	f000 f8a1 	bl	8002a60 <HAL_TIM_IC_CaptureCallback>
 800291e:	e007      	b.n	8002930 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	0018      	movs	r0, r3
 8002924:	f000 f894 	bl	8002a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	0018      	movs	r0, r3
 800292c:	f000 f8a0 	bl	8002a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2210      	movs	r2, #16
 800293e:	4013      	ands	r3, r2
 8002940:	2b10      	cmp	r3, #16
 8002942:	d125      	bne.n	8002990 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2210      	movs	r2, #16
 800294c:	4013      	ands	r3, r2
 800294e:	2b10      	cmp	r3, #16
 8002950:	d11e      	bne.n	8002990 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2211      	movs	r2, #17
 8002958:	4252      	negs	r2, r2
 800295a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2208      	movs	r2, #8
 8002960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	23c0      	movs	r3, #192	; 0xc0
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4013      	ands	r3, r2
 800296e:	d004      	beq.n	800297a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	0018      	movs	r0, r3
 8002974:	f000 f874 	bl	8002a60 <HAL_TIM_IC_CaptureCallback>
 8002978:	e007      	b.n	800298a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	0018      	movs	r0, r3
 800297e:	f000 f867 	bl	8002a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0018      	movs	r0, r3
 8002986:	f000 f873 	bl	8002a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2201      	movs	r2, #1
 8002998:	4013      	ands	r3, r2
 800299a:	2b01      	cmp	r3, #1
 800299c:	d10f      	bne.n	80029be <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d108      	bne.n	80029be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	4252      	negs	r2, r2
 80029b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f7ff f939 	bl	8001c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2280      	movs	r2, #128	; 0x80
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b80      	cmp	r3, #128	; 0x80
 80029ca:	d10f      	bne.n	80029ec <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2280      	movs	r2, #128	; 0x80
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b80      	cmp	r3, #128	; 0x80
 80029d8:	d108      	bne.n	80029ec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2281      	movs	r2, #129	; 0x81
 80029e0:	4252      	negs	r2, r2
 80029e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	0018      	movs	r0, r3
 80029e8:	f000 f8c6 	bl	8002b78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2240      	movs	r2, #64	; 0x40
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b40      	cmp	r3, #64	; 0x40
 80029f8:	d10f      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2240      	movs	r2, #64	; 0x40
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b40      	cmp	r3, #64	; 0x40
 8002a06:	d108      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2241      	movs	r2, #65	; 0x41
 8002a0e:	4252      	negs	r2, r2
 8002a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	0018      	movs	r0, r3
 8002a16:	f000 f833 	bl	8002a80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2220      	movs	r2, #32
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d10f      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d108      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2221      	movs	r2, #33	; 0x21
 8002a3c:	4252      	negs	r2, r2
 8002a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 f890 	bl	8002b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a58:	46c0      	nop			; (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b002      	add	sp, #8
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a68:	46c0      	nop			; (mov r8, r8)
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b002      	add	sp, #8
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b002      	add	sp, #8
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a2b      	ldr	r2, [pc, #172]	; (8002b50 <TIM_Base_SetConfig+0xc0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d003      	beq.n	8002ab0 <TIM_Base_SetConfig+0x20>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a2a      	ldr	r2, [pc, #168]	; (8002b54 <TIM_Base_SetConfig+0xc4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d108      	bne.n	8002ac2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2270      	movs	r2, #112	; 0x70
 8002ab4:	4393      	bics	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a22      	ldr	r2, [pc, #136]	; (8002b50 <TIM_Base_SetConfig+0xc0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00f      	beq.n	8002aea <TIM_Base_SetConfig+0x5a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a21      	ldr	r2, [pc, #132]	; (8002b54 <TIM_Base_SetConfig+0xc4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00b      	beq.n	8002aea <TIM_Base_SetConfig+0x5a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a20      	ldr	r2, [pc, #128]	; (8002b58 <TIM_Base_SetConfig+0xc8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d007      	beq.n	8002aea <TIM_Base_SetConfig+0x5a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <TIM_Base_SetConfig+0xcc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d003      	beq.n	8002aea <TIM_Base_SetConfig+0x5a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a1e      	ldr	r2, [pc, #120]	; (8002b60 <TIM_Base_SetConfig+0xd0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d108      	bne.n	8002afc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <TIM_Base_SetConfig+0xd4>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2280      	movs	r2, #128	; 0x80
 8002b00:	4393      	bics	r3, r2
 8002b02:	001a      	movs	r2, r3
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <TIM_Base_SetConfig+0xc0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <TIM_Base_SetConfig+0xaa>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a0b      	ldr	r2, [pc, #44]	; (8002b5c <TIM_Base_SetConfig+0xcc>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d003      	beq.n	8002b3a <TIM_Base_SetConfig+0xaa>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a0a      	ldr	r2, [pc, #40]	; (8002b60 <TIM_Base_SetConfig+0xd0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d103      	bne.n	8002b42 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	615a      	str	r2, [r3, #20]
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b004      	add	sp, #16
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40012c00 	.word	0x40012c00
 8002b54:	40000400 	.word	0x40000400
 8002b58:	40002000 	.word	0x40002000
 8002b5c:	40014400 	.word	0x40014400
 8002b60:	40014800 	.word	0x40014800
 8002b64:	fffffcff 	.word	0xfffffcff

08002b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b70:	46c0      	nop			; (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b002      	add	sp, #8
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e044      	b.n	8002c24 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d107      	bne.n	8002bb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2278      	movs	r2, #120	; 0x78
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7ff f9a3 	bl	8001ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2224      	movs	r2, #36	; 0x24
 8002bb6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	438a      	bics	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f000 f830 	bl	8002c30 <UART_SetConfig>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e024      	b.n	8002c24 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f000 f94b 	bl	8002e80 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	490d      	ldr	r1, [pc, #52]	; (8002c2c <HAL_UART_Init+0xa4>)
 8002bf6:	400a      	ands	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2108      	movs	r1, #8
 8002c06:	438a      	bics	r2, r1
 8002c08:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2101      	movs	r1, #1
 8002c16:	430a      	orrs	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f000 f9e3 	bl	8002fe8 <UART_CheckIdleState>
 8002c22:	0003      	movs	r3, r0
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b002      	add	sp, #8
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	fffff7ff 	.word	0xfffff7ff

08002c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c38:	231e      	movs	r3, #30
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a83      	ldr	r2, [pc, #524]	; (8002e6c <UART_SetConfig+0x23c>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	0019      	movs	r1, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a7e      	ldr	r2, [pc, #504]	; (8002e70 <UART_SetConfig+0x240>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	0019      	movs	r1, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4a75      	ldr	r2, [pc, #468]	; (8002e74 <UART_SetConfig+0x244>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cac:	4b72      	ldr	r3, [pc, #456]	; (8002e78 <UART_SetConfig+0x248>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d00d      	beq.n	8002cd4 <UART_SetConfig+0xa4>
 8002cb8:	d81b      	bhi.n	8002cf2 <UART_SetConfig+0xc2>
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d014      	beq.n	8002ce8 <UART_SetConfig+0xb8>
 8002cbe:	d818      	bhi.n	8002cf2 <UART_SetConfig+0xc2>
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <UART_SetConfig+0x9a>
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d00a      	beq.n	8002cde <UART_SetConfig+0xae>
 8002cc8:	e013      	b.n	8002cf2 <UART_SetConfig+0xc2>
 8002cca:	231f      	movs	r3, #31
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e012      	b.n	8002cfa <UART_SetConfig+0xca>
 8002cd4:	231f      	movs	r3, #31
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	2202      	movs	r2, #2
 8002cda:	701a      	strb	r2, [r3, #0]
 8002cdc:	e00d      	b.n	8002cfa <UART_SetConfig+0xca>
 8002cde:	231f      	movs	r3, #31
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	e008      	b.n	8002cfa <UART_SetConfig+0xca>
 8002ce8:	231f      	movs	r3, #31
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	2208      	movs	r2, #8
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	e003      	b.n	8002cfa <UART_SetConfig+0xca>
 8002cf2:	231f      	movs	r3, #31
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	2210      	movs	r2, #16
 8002cf8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	021b      	lsls	r3, r3, #8
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d15c      	bne.n	8002dc0 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8002d06:	231f      	movs	r3, #31
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d015      	beq.n	8002d3c <UART_SetConfig+0x10c>
 8002d10:	dc18      	bgt.n	8002d44 <UART_SetConfig+0x114>
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d00d      	beq.n	8002d32 <UART_SetConfig+0x102>
 8002d16:	dc15      	bgt.n	8002d44 <UART_SetConfig+0x114>
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <UART_SetConfig+0xf2>
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d005      	beq.n	8002d2c <UART_SetConfig+0xfc>
 8002d20:	e010      	b.n	8002d44 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d22:	f7ff fcad 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8002d26:	0003      	movs	r3, r0
 8002d28:	61bb      	str	r3, [r7, #24]
        break;
 8002d2a:	e012      	b.n	8002d52 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d2c:	4b53      	ldr	r3, [pc, #332]	; (8002e7c <UART_SetConfig+0x24c>)
 8002d2e:	61bb      	str	r3, [r7, #24]
        break;
 8002d30:	e00f      	b.n	8002d52 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d32:	f7ff fc45 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 8002d36:	0003      	movs	r3, r0
 8002d38:	61bb      	str	r3, [r7, #24]
        break;
 8002d3a:	e00a      	b.n	8002d52 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	61bb      	str	r3, [r7, #24]
        break;
 8002d42:	e006      	b.n	8002d52 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d48:	231e      	movs	r3, #30
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
        break;
 8002d50:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d100      	bne.n	8002d5a <UART_SetConfig+0x12a>
 8002d58:	e07a      	b.n	8002e50 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	005a      	lsls	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	085b      	lsrs	r3, r3, #1
 8002d64:	18d2      	adds	r2, r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	0010      	movs	r0, r2
 8002d6e:	f7fd f9cb 	bl	8000108 <__udivsi3>
 8002d72:	0003      	movs	r3, r0
 8002d74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	2b0f      	cmp	r3, #15
 8002d7a:	d91c      	bls.n	8002db6 <UART_SetConfig+0x186>
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	025b      	lsls	r3, r3, #9
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d217      	bcs.n	8002db6 <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	200e      	movs	r0, #14
 8002d8c:	183b      	adds	r3, r7, r0
 8002d8e:	210f      	movs	r1, #15
 8002d90:	438a      	bics	r2, r1
 8002d92:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2207      	movs	r2, #7
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	b299      	uxth	r1, r3
 8002da0:	183b      	adds	r3, r7, r0
 8002da2:	183a      	adds	r2, r7, r0
 8002da4:	8812      	ldrh	r2, [r2, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	183a      	adds	r2, r7, r0
 8002db0:	8812      	ldrh	r2, [r2, #0]
 8002db2:	60da      	str	r2, [r3, #12]
 8002db4:	e04c      	b.n	8002e50 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8002db6:	231e      	movs	r3, #30
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e047      	b.n	8002e50 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dc0:	231f      	movs	r3, #31
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d015      	beq.n	8002df6 <UART_SetConfig+0x1c6>
 8002dca:	dc18      	bgt.n	8002dfe <UART_SetConfig+0x1ce>
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d00d      	beq.n	8002dec <UART_SetConfig+0x1bc>
 8002dd0:	dc15      	bgt.n	8002dfe <UART_SetConfig+0x1ce>
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <UART_SetConfig+0x1ac>
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d005      	beq.n	8002de6 <UART_SetConfig+0x1b6>
 8002dda:	e010      	b.n	8002dfe <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ddc:	f7ff fc50 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8002de0:	0003      	movs	r3, r0
 8002de2:	61bb      	str	r3, [r7, #24]
        break;
 8002de4:	e012      	b.n	8002e0c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002de6:	4b25      	ldr	r3, [pc, #148]	; (8002e7c <UART_SetConfig+0x24c>)
 8002de8:	61bb      	str	r3, [r7, #24]
        break;
 8002dea:	e00f      	b.n	8002e0c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dec:	f7ff fbe8 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 8002df0:	0003      	movs	r3, r0
 8002df2:	61bb      	str	r3, [r7, #24]
        break;
 8002df4:	e00a      	b.n	8002e0c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	61bb      	str	r3, [r7, #24]
        break;
 8002dfc:	e006      	b.n	8002e0c <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e02:	231e      	movs	r3, #30
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
        break;
 8002e0a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d01e      	beq.n	8002e50 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	085a      	lsrs	r2, r3, #1
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	18d2      	adds	r2, r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	0019      	movs	r1, r3
 8002e22:	0010      	movs	r0, r2
 8002e24:	f7fd f970 	bl	8000108 <__udivsi3>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	2b0f      	cmp	r3, #15
 8002e30:	d90a      	bls.n	8002e48 <UART_SetConfig+0x218>
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	025b      	lsls	r3, r3, #9
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d205      	bcs.n	8002e48 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	e003      	b.n	8002e50 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8002e48:	231e      	movs	r3, #30
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e5c:	231e      	movs	r3, #30
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	781b      	ldrb	r3, [r3, #0]
}
 8002e62:	0018      	movs	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b008      	add	sp, #32
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	ffff69f3 	.word	0xffff69f3
 8002e70:	ffffcfff 	.word	0xffffcfff
 8002e74:	fffff4ff 	.word	0xfffff4ff
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	007a1200 	.word	0x007a1200

08002e80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d00b      	beq.n	8002eaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4a4a      	ldr	r2, [pc, #296]	; (8002fc4 <UART_AdvFeatureConfig+0x144>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	0019      	movs	r1, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	2202      	movs	r2, #2
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d00b      	beq.n	8002ecc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4a43      	ldr	r2, [pc, #268]	; (8002fc8 <UART_AdvFeatureConfig+0x148>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d00b      	beq.n	8002eee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a3b      	ldr	r2, [pc, #236]	; (8002fcc <UART_AdvFeatureConfig+0x14c>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d00b      	beq.n	8002f10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4a34      	ldr	r2, [pc, #208]	; (8002fd0 <UART_AdvFeatureConfig+0x150>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	2210      	movs	r2, #16
 8002f16:	4013      	ands	r3, r2
 8002f18:	d00b      	beq.n	8002f32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4a2c      	ldr	r2, [pc, #176]	; (8002fd4 <UART_AdvFeatureConfig+0x154>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	2220      	movs	r2, #32
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d00b      	beq.n	8002f54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	4a25      	ldr	r2, [pc, #148]	; (8002fd8 <UART_AdvFeatureConfig+0x158>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	0019      	movs	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	2240      	movs	r2, #64	; 0x40
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d01d      	beq.n	8002f9a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4a1d      	ldr	r2, [pc, #116]	; (8002fdc <UART_AdvFeatureConfig+0x15c>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	0019      	movs	r1, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	035b      	lsls	r3, r3, #13
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d10b      	bne.n	8002f9a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a15      	ldr	r2, [pc, #84]	; (8002fe0 <UART_AdvFeatureConfig+0x160>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	2280      	movs	r2, #128	; 0x80
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d00b      	beq.n	8002fbc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4a0e      	ldr	r2, [pc, #56]	; (8002fe4 <UART_AdvFeatureConfig+0x164>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	0019      	movs	r1, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	605a      	str	r2, [r3, #4]
  }
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b002      	add	sp, #8
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	fffdffff 	.word	0xfffdffff
 8002fc8:	fffeffff 	.word	0xfffeffff
 8002fcc:	fffbffff 	.word	0xfffbffff
 8002fd0:	ffff7fff 	.word	0xffff7fff
 8002fd4:	ffffefff 	.word	0xffffefff
 8002fd8:	ffffdfff 	.word	0xffffdfff
 8002fdc:	ffefffff 	.word	0xffefffff
 8002fe0:	ff9fffff 	.word	0xff9fffff
 8002fe4:	fff7ffff 	.word	0xfff7ffff

08002fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b092      	sub	sp, #72	; 0x48
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2284      	movs	r2, #132	; 0x84
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ff8:	f7ff f850 	bl	800209c <HAL_GetTick>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2208      	movs	r2, #8
 8003008:	4013      	ands	r3, r2
 800300a:	2b08      	cmp	r3, #8
 800300c:	d12c      	bne.n	8003068 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800300e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003010:	2280      	movs	r2, #128	; 0x80
 8003012:	0391      	lsls	r1, r2, #14
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	4a46      	ldr	r2, [pc, #280]	; (8003130 <UART_CheckIdleState+0x148>)
 8003018:	9200      	str	r2, [sp, #0]
 800301a:	2200      	movs	r2, #0
 800301c:	f000 f88c 	bl	8003138 <UART_WaitOnFlagUntilTimeout>
 8003020:	1e03      	subs	r3, r0, #0
 8003022:	d021      	beq.n	8003068 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003024:	f3ef 8310 	mrs	r3, PRIMASK
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800302c:	63bb      	str	r3, [r7, #56]	; 0x38
 800302e:	2301      	movs	r3, #1
 8003030:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	f383 8810 	msr	PRIMASK, r3
}
 8003038:	46c0      	nop			; (mov r8, r8)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2180      	movs	r1, #128	; 0x80
 8003046:	438a      	bics	r2, r1
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	f383 8810 	msr	PRIMASK, r3
}
 8003054:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2278      	movs	r2, #120	; 0x78
 8003060:	2100      	movs	r1, #0
 8003062:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e05f      	b.n	8003128 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2204      	movs	r2, #4
 8003070:	4013      	ands	r3, r2
 8003072:	2b04      	cmp	r3, #4
 8003074:	d146      	bne.n	8003104 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003078:	2280      	movs	r2, #128	; 0x80
 800307a:	03d1      	lsls	r1, r2, #15
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4a2c      	ldr	r2, [pc, #176]	; (8003130 <UART_CheckIdleState+0x148>)
 8003080:	9200      	str	r2, [sp, #0]
 8003082:	2200      	movs	r2, #0
 8003084:	f000 f858 	bl	8003138 <UART_WaitOnFlagUntilTimeout>
 8003088:	1e03      	subs	r3, r0, #0
 800308a:	d03b      	beq.n	8003104 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308c:	f3ef 8310 	mrs	r3, PRIMASK
 8003090:	60fb      	str	r3, [r7, #12]
  return(result);
 8003092:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
 8003096:	2301      	movs	r3, #1
 8003098:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f383 8810 	msr	PRIMASK, r3
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4921      	ldr	r1, [pc, #132]	; (8003134 <UART_CheckIdleState+0x14c>)
 80030ae:	400a      	ands	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f383 8810 	msr	PRIMASK, r3
}
 80030bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030be:	f3ef 8310 	mrs	r3, PRIMASK
 80030c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80030c4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c6:	633b      	str	r3, [r7, #48]	; 0x30
 80030c8:	2301      	movs	r3, #1
 80030ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f383 8810 	msr	PRIMASK, r3
}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2101      	movs	r1, #1
 80030e0:	438a      	bics	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	f383 8810 	msr	PRIMASK, r3
}
 80030ee:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2280      	movs	r2, #128	; 0x80
 80030f4:	2120      	movs	r1, #32
 80030f6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2278      	movs	r2, #120	; 0x78
 80030fc:	2100      	movs	r1, #0
 80030fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e011      	b.n	8003128 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	2120      	movs	r1, #32
 8003110:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2278      	movs	r2, #120	; 0x78
 8003122:	2100      	movs	r1, #0
 8003124:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b010      	add	sp, #64	; 0x40
 800312e:	bd80      	pop	{r7, pc}
 8003130:	01ffffff 	.word	0x01ffffff
 8003134:	fffffedf 	.word	0xfffffedf

08003138 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	1dfb      	adds	r3, r7, #7
 8003146:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003148:	e04b      	b.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	3301      	adds	r3, #1
 800314e:	d048      	beq.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003150:	f7fe ffa4 	bl	800209c <HAL_GetTick>
 8003154:	0002      	movs	r2, r0
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	429a      	cmp	r2, r3
 800315e:	d302      	bcc.n	8003166 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e04b      	b.n	8003202 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2204      	movs	r2, #4
 8003172:	4013      	ands	r3, r2
 8003174:	d035      	beq.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	2208      	movs	r2, #8
 800317e:	4013      	ands	r3, r2
 8003180:	2b08      	cmp	r3, #8
 8003182:	d111      	bne.n	80031a8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2208      	movs	r2, #8
 800318a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	0018      	movs	r0, r3
 8003190:	f000 f83c 	bl	800320c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2284      	movs	r2, #132	; 0x84
 8003198:	2108      	movs	r1, #8
 800319a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2278      	movs	r2, #120	; 0x78
 80031a0:	2100      	movs	r1, #0
 80031a2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e02c      	b.n	8003202 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69da      	ldr	r2, [r3, #28]
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	401a      	ands	r2, r3
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d112      	bne.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2280      	movs	r2, #128	; 0x80
 80031c2:	0112      	lsls	r2, r2, #4
 80031c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f000 f81f 	bl	800320c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2284      	movs	r2, #132	; 0x84
 80031d2:	2120      	movs	r1, #32
 80031d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2278      	movs	r2, #120	; 0x78
 80031da:	2100      	movs	r1, #0
 80031dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e00f      	b.n	8003202 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	4013      	ands	r3, r2
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	425a      	negs	r2, r3
 80031f2:	4153      	adcs	r3, r2
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	001a      	movs	r2, r3
 80031f8:	1dfb      	adds	r3, r7, #7
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d0a4      	beq.n	800314a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	0018      	movs	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	b004      	add	sp, #16
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08e      	sub	sp, #56	; 0x38
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003214:	f3ef 8310 	mrs	r3, PRIMASK
 8003218:	617b      	str	r3, [r7, #20]
  return(result);
 800321a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800321c:	637b      	str	r3, [r7, #52]	; 0x34
 800321e:	2301      	movs	r3, #1
 8003220:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f383 8810 	msr	PRIMASK, r3
}
 8003228:	46c0      	nop			; (mov r8, r8)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4926      	ldr	r1, [pc, #152]	; (80032d0 <UART_EndRxTransfer+0xc4>)
 8003236:	400a      	ands	r2, r1
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f383 8810 	msr	PRIMASK, r3
}
 8003244:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003246:	f3ef 8310 	mrs	r3, PRIMASK
 800324a:	623b      	str	r3, [r7, #32]
  return(result);
 800324c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324e:	633b      	str	r3, [r7, #48]	; 0x30
 8003250:	2301      	movs	r3, #1
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	f383 8810 	msr	PRIMASK, r3
}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2101      	movs	r1, #1
 8003268:	438a      	bics	r2, r1
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003272:	f383 8810 	msr	PRIMASK, r3
}
 8003276:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327c:	2b01      	cmp	r3, #1
 800327e:	d118      	bne.n	80032b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003280:	f3ef 8310 	mrs	r3, PRIMASK
 8003284:	60bb      	str	r3, [r7, #8]
  return(result);
 8003286:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800328a:	2301      	movs	r3, #1
 800328c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f383 8810 	msr	PRIMASK, r3
}
 8003294:	46c0      	nop			; (mov r8, r8)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2110      	movs	r1, #16
 80032a2:	438a      	bics	r2, r1
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f383 8810 	msr	PRIMASK, r3
}
 80032b0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2280      	movs	r2, #128	; 0x80
 80032b6:	2120      	movs	r1, #32
 80032b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b00e      	add	sp, #56	; 0x38
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	fffffedf 	.word	0xfffffedf

080032d4 <LL_EXTI_EnableIT_0_31>:
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <LL_EXTI_EnableIT_0_31+0x1c>)
 80032de:	6819      	ldr	r1, [r3, #0]
 80032e0:	4b03      	ldr	r3, [pc, #12]	; (80032f0 <LL_EXTI_EnableIT_0_31+0x1c>)
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]
}
 80032e8:	46c0      	nop			; (mov r8, r8)
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b002      	add	sp, #8
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40010400 	.word	0x40010400

080032f4 <LL_EXTI_DisableIT_0_31>:
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <LL_EXTI_DisableIT_0_31+0x20>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	43d9      	mvns	r1, r3
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <LL_EXTI_DisableIT_0_31+0x20>)
 8003306:	400a      	ands	r2, r1
 8003308:	601a      	str	r2, [r3, #0]
}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	46bd      	mov	sp, r7
 800330e:	b002      	add	sp, #8
 8003310:	bd80      	pop	{r7, pc}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	40010400 	.word	0x40010400

08003318 <LL_EXTI_EnableEvent_0_31>:
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003320:	4b04      	ldr	r3, [pc, #16]	; (8003334 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]
}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	46bd      	mov	sp, r7
 8003330:	b002      	add	sp, #8
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40010400 	.word	0x40010400

08003338 <LL_EXTI_DisableEvent_0_31>:
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <LL_EXTI_DisableEvent_0_31+0x20>)
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	43d9      	mvns	r1, r3
 8003348:	4b03      	ldr	r3, [pc, #12]	; (8003358 <LL_EXTI_DisableEvent_0_31+0x20>)
 800334a:	400a      	ands	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	46bd      	mov	sp, r7
 8003352:	b002      	add	sp, #8
 8003354:	bd80      	pop	{r7, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	40010400 	.word	0x40010400

0800335c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8003366:	6899      	ldr	r1, [r3, #8]
 8003368:	4b03      	ldr	r3, [pc, #12]	; (8003378 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	430a      	orrs	r2, r1
 800336e:	609a      	str	r2, [r3, #8]
}
 8003370:	46c0      	nop			; (mov r8, r8)
 8003372:	46bd      	mov	sp, r7
 8003374:	b002      	add	sp, #8
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40010400 	.word	0x40010400

0800337c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	43d9      	mvns	r1, r3
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800338e:	400a      	ands	r2, r1
 8003390:	609a      	str	r2, [r3, #8]
}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	46bd      	mov	sp, r7
 8003396:	b002      	add	sp, #8
 8003398:	bd80      	pop	{r7, pc}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	40010400 	.word	0x40010400

080033a0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80033a8:	4b04      	ldr	r3, [pc, #16]	; (80033bc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80033aa:	68d9      	ldr	r1, [r3, #12]
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	60da      	str	r2, [r3, #12]
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b002      	add	sp, #8
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40010400 	.word	0x40010400

080033c0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	43d9      	mvns	r1, r3
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80033d2:	400a      	ands	r2, r1
 80033d4:	60da      	str	r2, [r3, #12]
}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	46bd      	mov	sp, r7
 80033da:	b002      	add	sp, #8
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	40010400 	.word	0x40010400

080033e4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80033ec:	230f      	movs	r3, #15
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	2200      	movs	r2, #0
 80033f2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	791b      	ldrb	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d100      	bne.n	80033fe <LL_EXTI_Init+0x1a>
 80033fc:	e068      	b.n	80034d0 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d100      	bne.n	8003408 <LL_EXTI_Init+0x24>
 8003406:	e06d      	b.n	80034e4 <LL_EXTI_Init+0x100>
    {
      switch (EXTI_InitStruct->Mode)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	795b      	ldrb	r3, [r3, #5]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d01b      	beq.n	8003448 <LL_EXTI_Init+0x64>
 8003410:	dc25      	bgt.n	800345e <LL_EXTI_Init+0x7a>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <LL_EXTI_Init+0x38>
 8003416:	2b01      	cmp	r3, #1
 8003418:	d00b      	beq.n	8003432 <LL_EXTI_Init+0x4e>
 800341a:	e020      	b.n	800345e <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	0018      	movs	r0, r3
 8003422:	f7ff ff89 	bl	8003338 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	0018      	movs	r0, r3
 800342c:	f7ff ff52 	bl	80032d4 <LL_EXTI_EnableIT_0_31>
          break;
 8003430:	e01a      	b.n	8003468 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	0018      	movs	r0, r3
 8003438:	f7ff ff5c 	bl	80032f4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	0018      	movs	r0, r3
 8003442:	f7ff ff69 	bl	8003318 <LL_EXTI_EnableEvent_0_31>
          break;
 8003446:	e00f      	b.n	8003468 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	0018      	movs	r0, r3
 800344e:	f7ff ff41 	bl	80032d4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	0018      	movs	r0, r3
 8003458:	f7ff ff5e 	bl	8003318 <LL_EXTI_EnableEvent_0_31>
          break;
 800345c:	e004      	b.n	8003468 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 800345e:	230f      	movs	r3, #15
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
          break;
 8003466:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	799b      	ldrb	r3, [r3, #6]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d039      	beq.n	80034e4 <LL_EXTI_Init+0x100>
      {
        switch (EXTI_InitStruct->Trigger)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	799b      	ldrb	r3, [r3, #6]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d01b      	beq.n	80034b0 <LL_EXTI_Init+0xcc>
 8003478:	dc25      	bgt.n	80034c6 <LL_EXTI_Init+0xe2>
 800347a:	2b01      	cmp	r3, #1
 800347c:	d002      	beq.n	8003484 <LL_EXTI_Init+0xa0>
 800347e:	2b02      	cmp	r3, #2
 8003480:	d00b      	beq.n	800349a <LL_EXTI_Init+0xb6>
 8003482:	e020      	b.n	80034c6 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	0018      	movs	r0, r3
 800348a:	f7ff ff99 	bl	80033c0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	0018      	movs	r0, r3
 8003494:	f7ff ff62 	bl	800335c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003498:	e024      	b.n	80034e4 <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	0018      	movs	r0, r3
 80034a0:	f7ff ff6c 	bl	800337c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f7ff ff79 	bl	80033a0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80034ae:	e019      	b.n	80034e4 <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	0018      	movs	r0, r3
 80034b6:	f7ff ff51 	bl	800335c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	0018      	movs	r0, r3
 80034c0:	f7ff ff6e 	bl	80033a0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80034c4:	e00e      	b.n	80034e4 <LL_EXTI_Init+0x100>
          default:
            status = ERROR;
 80034c6:	230f      	movs	r3, #15
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
            break;
 80034ce:	e009      	b.n	80034e4 <LL_EXTI_Init+0x100>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	0018      	movs	r0, r3
 80034d6:	f7ff ff0d 	bl	80032f4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	0018      	movs	r0, r3
 80034e0:	f7ff ff2a 	bl	8003338 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80034e4:	230f      	movs	r3, #15
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	781b      	ldrb	r3, [r3, #0]
}
 80034ea:	0018      	movs	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b004      	add	sp, #16
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <LL_GPIO_SetPinMode>:
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6819      	ldr	r1, [r3, #0]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	435b      	muls	r3, r3
 8003506:	001a      	movs	r2, r3
 8003508:	0013      	movs	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	189b      	adds	r3, r3, r2
 800350e:	43db      	mvns	r3, r3
 8003510:	400b      	ands	r3, r1
 8003512:	001a      	movs	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	435b      	muls	r3, r3
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	434b      	muls	r3, r1
 800351c:	431a      	orrs	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	601a      	str	r2, [r3, #0]
}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b004      	add	sp, #16
 8003528:	bd80      	pop	{r7, pc}

0800352a <LL_GPIO_SetPinOutputType>:
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	43d2      	mvns	r2, r2
 800353e:	401a      	ands	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	434b      	muls	r3, r1
 8003546:	431a      	orrs	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	605a      	str	r2, [r3, #4]
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b004      	add	sp, #16
 8003552:	bd80      	pop	{r7, pc}

08003554 <LL_GPIO_SetPinSpeed>:
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6899      	ldr	r1, [r3, #8]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	435b      	muls	r3, r3
 8003568:	001a      	movs	r2, r3
 800356a:	0013      	movs	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	189b      	adds	r3, r3, r2
 8003570:	43db      	mvns	r3, r3
 8003572:	400b      	ands	r3, r1
 8003574:	001a      	movs	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	435b      	muls	r3, r3
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	434b      	muls	r3, r1
 800357e:	431a      	orrs	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	609a      	str	r2, [r3, #8]
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	b004      	add	sp, #16
 800358a:	bd80      	pop	{r7, pc}

0800358c <LL_GPIO_SetPinPull>:
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	68d9      	ldr	r1, [r3, #12]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	435b      	muls	r3, r3
 80035a0:	001a      	movs	r2, r3
 80035a2:	0013      	movs	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	189b      	adds	r3, r3, r2
 80035a8:	43db      	mvns	r3, r3
 80035aa:	400b      	ands	r3, r1
 80035ac:	001a      	movs	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	435b      	muls	r3, r3
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	434b      	muls	r3, r1
 80035b6:	431a      	orrs	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	60da      	str	r2, [r3, #12]
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b004      	add	sp, #16
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <LL_GPIO_SetAFPin_0_7>:
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a19      	ldr	r1, [r3, #32]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	435b      	muls	r3, r3
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	4353      	muls	r3, r2
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	435a      	muls	r2, r3
 80035e0:	0013      	movs	r3, r2
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	43db      	mvns	r3, r3
 80035e8:	400b      	ands	r3, r1
 80035ea:	001a      	movs	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	435b      	muls	r3, r3
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	434b      	muls	r3, r1
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	434b      	muls	r3, r1
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	434b      	muls	r3, r1
 80035fc:	431a      	orrs	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	621a      	str	r2, [r3, #32]
}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	46bd      	mov	sp, r7
 8003606:	b004      	add	sp, #16
 8003608:	bd80      	pop	{r7, pc}

0800360a <LL_GPIO_SetAFPin_8_15>:
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	0a1b      	lsrs	r3, r3, #8
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	0a12      	lsrs	r2, r2, #8
 8003622:	4353      	muls	r3, r2
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	0a12      	lsrs	r2, r2, #8
 8003628:	4353      	muls	r3, r2
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	0a12      	lsrs	r2, r2, #8
 800362e:	435a      	muls	r2, r3
 8003630:	0013      	movs	r3, r2
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	43db      	mvns	r3, r3
 8003638:	400b      	ands	r3, r1
 800363a:	001a      	movs	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	0a1b      	lsrs	r3, r3, #8
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	0a09      	lsrs	r1, r1, #8
 8003644:	434b      	muls	r3, r1
 8003646:	68b9      	ldr	r1, [r7, #8]
 8003648:	0a09      	lsrs	r1, r1, #8
 800364a:	434b      	muls	r3, r1
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	0a09      	lsrs	r1, r1, #8
 8003650:	434b      	muls	r3, r1
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	434b      	muls	r3, r1
 8003656:	431a      	orrs	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800365c:	46c0      	nop			; (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	b004      	add	sp, #16
 8003662:	bd80      	pop	{r7, pc}

08003664 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003672:	e048      	b.n	8003706 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2101      	movs	r1, #1
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4091      	lsls	r1, r2
 800367e:	000a      	movs	r2, r1
 8003680:	4013      	ands	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d03a      	beq.n	8003700 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d003      	beq.n	800369a <LL_GPIO_Init+0x36>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d10e      	bne.n	80036b8 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	0018      	movs	r0, r3
 80036a4:	f7ff ff56 	bl	8003554 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	6819      	ldr	r1, [r3, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	0018      	movs	r0, r3
 80036b4:	f7ff ff39 	bl	800352a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7ff ff63 	bl	800358c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d111      	bne.n	80036f2 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2bff      	cmp	r3, #255	; 0xff
 80036d2:	d807      	bhi.n	80036e4 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	0018      	movs	r0, r3
 80036de:	f7ff ff71 	bl	80035c4 <LL_GPIO_SetAFPin_0_7>
 80036e2:	e006      	b.n	80036f2 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7ff ff8c 	bl	800360a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	0018      	movs	r0, r3
 80036fc:	f7ff fef9 	bl	80034f2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3301      	adds	r3, #1
 8003704:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	40da      	lsrs	r2, r3
 800370e:	1e13      	subs	r3, r2, #0
 8003710:	d1b0      	bne.n	8003674 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8003712:	2300      	movs	r3, #0
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	b004      	add	sp, #16
 800371a:	bd80      	pop	{r7, pc}

0800371c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003724:	4b03      	ldr	r3, [pc, #12]	; (8003734 <LL_SetSystemCoreClock+0x18>)
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	601a      	str	r2, [r3, #0]
}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	b002      	add	sp, #8
 8003730:	bd80      	pop	{r7, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	2000000c 	.word	0x2000000c

08003738 <memset>:
 8003738:	0003      	movs	r3, r0
 800373a:	1882      	adds	r2, r0, r2
 800373c:	4293      	cmp	r3, r2
 800373e:	d100      	bne.n	8003742 <memset+0xa>
 8003740:	4770      	bx	lr
 8003742:	7019      	strb	r1, [r3, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	e7f9      	b.n	800373c <memset+0x4>

08003748 <__libc_init_array>:
 8003748:	b570      	push	{r4, r5, r6, lr}
 800374a:	2600      	movs	r6, #0
 800374c:	4c0c      	ldr	r4, [pc, #48]	; (8003780 <__libc_init_array+0x38>)
 800374e:	4d0d      	ldr	r5, [pc, #52]	; (8003784 <__libc_init_array+0x3c>)
 8003750:	1b64      	subs	r4, r4, r5
 8003752:	10a4      	asrs	r4, r4, #2
 8003754:	42a6      	cmp	r6, r4
 8003756:	d109      	bne.n	800376c <__libc_init_array+0x24>
 8003758:	2600      	movs	r6, #0
 800375a:	f000 f819 	bl	8003790 <_init>
 800375e:	4c0a      	ldr	r4, [pc, #40]	; (8003788 <__libc_init_array+0x40>)
 8003760:	4d0a      	ldr	r5, [pc, #40]	; (800378c <__libc_init_array+0x44>)
 8003762:	1b64      	subs	r4, r4, r5
 8003764:	10a4      	asrs	r4, r4, #2
 8003766:	42a6      	cmp	r6, r4
 8003768:	d105      	bne.n	8003776 <__libc_init_array+0x2e>
 800376a:	bd70      	pop	{r4, r5, r6, pc}
 800376c:	00b3      	lsls	r3, r6, #2
 800376e:	58eb      	ldr	r3, [r5, r3]
 8003770:	4798      	blx	r3
 8003772:	3601      	adds	r6, #1
 8003774:	e7ee      	b.n	8003754 <__libc_init_array+0xc>
 8003776:	00b3      	lsls	r3, r6, #2
 8003778:	58eb      	ldr	r3, [r5, r3]
 800377a:	4798      	blx	r3
 800377c:	3601      	adds	r6, #1
 800377e:	e7f2      	b.n	8003766 <__libc_init_array+0x1e>
 8003780:	08003864 	.word	0x08003864
 8003784:	08003864 	.word	0x08003864
 8003788:	08003868 	.word	0x08003868
 800378c:	08003864 	.word	0x08003864

08003790 <_init>:
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003796:	bc08      	pop	{r3}
 8003798:	469e      	mov	lr, r3
 800379a:	4770      	bx	lr

0800379c <_fini>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a2:	bc08      	pop	{r3}
 80037a4:	469e      	mov	lr, r3
 80037a6:	4770      	bx	lr
